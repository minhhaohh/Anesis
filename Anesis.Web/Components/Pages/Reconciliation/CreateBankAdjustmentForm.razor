@inject IApiService _apiService
@inject NotificationService _notifyService
@inject DialogService _dialogService

<RadzenTemplateForm TItem="BankAdjustmentCreateModel" Data="CreateModel" Submit="CreateBankAdjustmentAsync">
    <RadzenStack>
        <RadzenFieldset Text="Bank Adjustment">
            <RadzenStack Gap="1rem">
                <RadzenRow>
                    <RadzenColumn SizeSM="4">
                        <RadzenLabel Text="Post Date" Component="PostDate" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn SizeSM="8">
                        <RadzenDatePicker @bind-Value="CreateModel.PostDate" Name="PostDate"
                                          AllowClear="true" AllowInput="false"
                                          DateFormat="MM/dd/yyyy" Placeholder="MM/dd/yyyy" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn SizeSM="4">
                        <RadzenLabel Text="Reference" Component="Reference" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn SizeSM="8">
                        <RadzenTextBox @bind-Value="CreateModel.Reference" Name="Reference" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn SizeSM="4">
                        <RadzenLabel Text="Description" Component="Description" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn SizeSM="8">
                        <RadzenTextBox @bind-Value="CreateModel.Description" Name="Description" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn SizeSM="4">
                        <RadzenLabel Text="Transaction Type" Component="TransactionType" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn SizeSM="8">
                        <RadzenTextBox @bind-Value="CreateModel.TransactionType" Name="TransactionType" Style="width: 100%;" Disabled />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn SizeSM="4">
                        <RadzenLabel Text="Amount" Component="Amount" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn SizeSM="8">
                        <RadzenFormField Style="width: 100%;" class="custom-input-group">
                            <Start>
                                <RadzenIcon Icon="attach_money" />
                            </Start>
                            <ChildContent>
                                <RadzenNumeric @bind-Value="CreateModel.Amount" Name="Amount" Style="width: 100%;" />
                            </ChildContent>
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenFieldset>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary"
                          Text="Save" Icon="save" />
            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base"
                          Text="Close" Click="() => _dialogService.Close()" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter]
    public BankAdjustmentCreateModel CreateModel { get; set; }

    // SUPPORT METHODS
    private async Task CreateBankAdjustmentAsync(BankAdjustmentCreateModel bankAdjustment)
    {
        var createAdjustmentRes = await _apiService.CreateBankAdjustmentAsync(bankAdjustment);

        if (createAdjustmentRes.Success)
        {
            _notifyService.NotifySuccess("Create Bank Transaction Adjustment", createAdjustmentRes.Data);
            _dialogService.Close();
        }
        else
        {
            _notifyService.NotifyErrors("Create Bank Transaction Adjustment", createAdjustmentRes.Messages);
        }
    }
}
