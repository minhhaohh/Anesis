@inject IApiService _apiService
@inject NotificationService _notifyService
@inject DialogService _dialogService

<RadzenStack>
    <RadzenRow RowGap="0">
        <RadzenColumn Size="12" SizeMD="2">
            <RadzenText TextStyle="TextStyle.Body2">Bank Transaction ID:</RadzenText>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="4">
            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-color-danger">@ViewModel.Id</RadzenText>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="2">
            <RadzenText TextStyle="TextStyle.Body2">Original Amount:</RadzenText>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="4">
            <RadzenText TextStyle="TextStyle.Subtitle2">@ViewModel.Credit?.ToString("C2")</RadzenText>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="2">
            <RadzenText TextStyle="TextStyle.Body2" class="required-near">Split Amount:</RadzenText>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="4">
            @if (Deposit != null)
            {
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-color-success">@_splitAmount.ToString("C2")</RadzenText>
            }
            else
            {
                <RadzenFormField Style="width: 100%;" class="custom-input-group">
                    <Start>
                        <RadzenIcon Icon="attach_money" />
                    </Start>
                    <ChildContent>
                        <RadzenNumeric @bind-Value="_splitAmount" Name="SplitAmount" Style="width: 100%;" />
                    </ChildContent>
                </RadzenFormField>
            }
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="2">
            <RadzenText TextStyle="TextStyle.Body2">Remaining Amount:</RadzenText>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="4">
            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-color-primary">@_remainingAmount.ToString("C2")</RadzenText>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="2">
            <RadzenText TextStyle="TextStyle.Body2" class="required-near">Notes:</RadzenText>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="10">
            <RadzenTextBox @bind-Value="_notes" Name="Notes" Style="width: 100%;" />
        </RadzenColumn>
    </RadzenRow>

    @if (Deposit != null)
    {
        <RadzenRow RowGap="0">
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenText TextStyle="TextStyle.Body2">Deposit ID:</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText TextStyle="TextStyle.Subtitle2">@Deposit.Id</RadzenText>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="2">
                <RadzenText TextStyle="TextStyle.Body2">Status:</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText TextStyle="TextStyle.Subtitle2">@Deposit.Status</RadzenText>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="2">
                <RadzenText TextStyle="TextStyle.Body2">Medical Record?:</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText TextStyle="TextStyle.Subtitle2">@(Deposit.MedicalRecords ? "Yes" : "No")</RadzenText>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="2">
                <RadzenText TextStyle="TextStyle.Body2">Deposit To:</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText TextStyle="TextStyle.Subtitle2">@Deposit.DepositTo</RadzenText>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="2">
                <RadzenText TextStyle="TextStyle.Body2">Transaction ID:</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText TextStyle="TextStyle.Subtitle2">@Deposit.TransactionId</RadzenText>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="2">
                <RadzenText TextStyle="TextStyle.Body2">Deposit Amount:</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText TextStyle="TextStyle.Subtitle2">@Deposit.DepositAmount?.ToString("C2")</RadzenText>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="2">
                <RadzenText TextStyle="TextStyle.Body2">Deposited Date:</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText TextStyle="TextStyle.Subtitle2">@Deposit.DepositDate?.ToString("MM/dd/yyyy")</RadzenText>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="2">
                <RadzenText TextStyle="TextStyle.Body2">Deposited By:</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText TextStyle="TextStyle.Subtitle2">@Deposit.DepositedBy</RadzenText>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="2">
                <RadzenText TextStyle="TextStyle.Body2">Created Date:</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText TextStyle="TextStyle.Subtitle2">@Deposit.CreatedDate.ToString("MM/dd/yyyy HH:mm")</RadzenText>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="2">
                <RadzenText TextStyle="TextStyle.Body2">Created By:</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText TextStyle="TextStyle.Subtitle2">@Deposit.CreatedBy</RadzenText>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="2">
                <RadzenText TextStyle="TextStyle.Body2">Description:</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText TextStyle="TextStyle.Subtitle2">@Deposit.Description</RadzenText>
            </RadzenColumn>
        </RadzenRow>

        <RadzenTable>
            <RadzenTableHeader>
                <RadzenTableHeaderRow>
                    <RadzenTableHeaderCell Style="width: 5%;"></RadzenTableHeaderCell>
                    <RadzenTableHeaderCell Style="width: 10%;">Item</RadzenTableHeaderCell>
                    <RadzenTableHeaderCell Style="width: 10%;">Type</RadzenTableHeaderCell>
                    <RadzenTableHeaderCell Style="width: 20%;">Received From</RadzenTableHeaderCell>
                    <RadzenTableHeaderCell Style="width: 20%;">Received Date</RadzenTableHeaderCell>
                    <RadzenTableHeaderCell Style="width: 10%;">Received By</RadzenTableHeaderCell>
                    <RadzenTableHeaderCell Style="width: 15%;">Item Amount</RadzenTableHeaderCell>
                    <RadzenTableHeaderCell Style="width: 10%;">Status</RadzenTableHeaderCell>
                </RadzenTableHeaderRow>
            </RadzenTableHeader>
            <RadzenTableBody>
                @foreach (var item in Deposit.DepositItems)
                {
                    var selected = _selectedItems.Contains(item.ItemNumber);
                    var colorClass = item.IsAutoLinked ? "" : "rz-color-danger";

                    <RadzenTableRow>
                        <RadzenTableCell>
                            <RadzenCheckBox @bind-Value="selected" TValue="bool"
                                            Change="@((isChecked) => SelectDepositItem(isChecked, item.ItemNumber))" />
                        </RadzenTableCell>
                        <RadzenTableCell><span class="@colorClass">@item.ItemNumber</span></RadzenTableCell>
                        <RadzenTableCell><span class="@colorClass">@item.DepositType</span></RadzenTableCell>
                        <RadzenTableCell><span class="@colorClass">@item.ReceivedFrom</span></RadzenTableCell>
                        <RadzenTableCell><span class="@colorClass">@item.ReceivedDate.ToString("MM-dd-yyyy")</span></RadzenTableCell>
                        <RadzenTableCell><span class="@colorClass">@item.ReceivedBy</span></RadzenTableCell>
                        <RadzenTableCell><span class="@colorClass">@item.ItemAmount.ToString("C2")</span></RadzenTableCell>
                        <RadzenTableCell><span class="@colorClass">@item.Status</span></RadzenTableCell>
                    </RadzenTableRow>
                }
            </RadzenTableBody>
        </RadzenTable>

        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-color-danger">Please select deposit items then click Save button.</RadzenText>
    }
    else
    {
        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-color-danger">Please enter a split amount then click Save button.</RadzenText>
    }
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" class="rz-mt-4">
        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary"
                      Text="Save" Icon="save" Click="SaveSplitTransactionAsync" />

        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base" Text="Close"
                      Click="(MouseEventArgs args) => _dialogService.Close()" />
    </RadzenStack>
</RadzenStack>

@code {
    [Parameter]
    public BankTransactionViewModel ViewModel { get; set; }
    [Parameter]
    public DepositViewModel Deposit { get; set; }
    [Parameter]
    public EventCallback OnRefreshGrid { get; set; }

    private decimal _remainingAmount = 0;
    private decimal _splitAmount = 0;
    private string _notes = "";
    private List<int> _selectedItems = new();

    // OVERRIDE METHODS
    protected override void OnParametersSet()
    {
        _remainingAmount = ViewModel.Credit.Value;
    }

    // SUPPORT METHODS
    private void SelectDepositItem(bool isChecked, int itemNumber)
    {
        if (isChecked)
        {
            _selectedItems.Add(itemNumber);
        }
        else
        {
            _selectedItems.Remove(itemNumber);
        }

        _splitAmount = Deposit.DepositItems.Where(x => _selectedItems.Contains(x.ItemNumber)).Sum(x => x.ItemAmount);
        _remainingAmount = ViewModel.Credit.Value - _splitAmount;
    }

    private async Task SaveSplitTransactionAsync()
    {
        var splitModel = new BankTransactionSplitModel
            {
                Id = ViewModel.Id,
                SplitAmount = _splitAmount,
                Notes = _notes,
            };
        var splitRes = await _apiService.SplitBankTransactionAsync(splitModel);

        if (!splitRes.Success)
        {
            _notifyService.NotifyErrors("Split Bank Transaction", splitRes.Messages);
        }
        else
        {
            _notifyService.NotifySuccess("Split Bank Transaction", splitRes.Data);
            _dialogService.Close(splitRes.Data);
            await RefreshGridAsync();
        }
    }

    private async Task RefreshGridAsync()
    {
        await OnRefreshGrid.InvokeAsync();
    }
}
