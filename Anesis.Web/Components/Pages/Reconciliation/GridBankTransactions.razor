@inject IApiService _apiService
@inject DialogService _dialogService
@inject NotificationService _notifyService
@inject ContextMenuService _contextMenuService

<style>
    .bank-grid .rz-data-row[reconciled] .rz-cell-data {
        color: var(--rz-success) !important;
    }

    .bank-grid .rz-data-row[over-amount] .rz-cell-data {
        color: var(--rz-danger) !important;
    }
</style>

<RadzenDataGrid @ref="_grid" TItem="BankTransactionViewModel" IsLoading="_isLoading"
                Density="Density.Compact" SelectionMode="DataGridSelectionMode.Single"
                Count="_data.TotalCount" Data="_data.Data" KeyProperty="Id" LoadData="LoadDataAsync"
                AllowSorting="true" AllowPaging="true" ShowPagingSummary="true"
                PageSizeOptions="PageSize.GetAll()" PageSize="_pageSize" PageNumbersCount="3"
                PageSizeText="" PagingSummaryFormat="Page {0} of {1} (total {2} records)"
                PagerHorizontalAlign="HorizontalAlign.Center" Style="max-height: 640px;"
                RowRender="OnRowRender" CellContextMenu="OnCellContextMenu" class="bank-grid">
    <Template Context="bank">
        <RadzenTable>
            <RadzenTableHeader>
                <RadzenTableHeaderRow>
                    <RadzenTableHeaderCell>Description</RadzenTableHeaderCell>
                </RadzenTableHeaderRow>
            </RadzenTableHeader>
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>@bank.Description2</RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
    </Template>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(BankTransactionViewModel.ReconciledFlag)" Width="5%" CssClass="rz-py-0">
            <Template Context="bank">
                <RadzenCheckBox TValue="bool" TriState="false" Value="@bank.ReconciledFlag" Disabled />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(BankTransactionViewModel.Id)" Title="#ID" Width="10%" />
        <RadzenDataGridColumn Property="@nameof(BankTransactionViewModel.PostDate)" Title="Date" FormatString="{0:MM-dd-yyyy}" Width="15%" />
        <RadzenDataGridColumn Property="@nameof(BankTransactionViewModel.Reference)" Title="Reference" Width="30%" />
        <RadzenDataGridColumn Property="@nameof(BankTransactionViewModel.TransactionType)" Title="Type" Width="12%" />
        <RadzenDataGridColumn Property="@nameof(BankTransactionViewModel.Debit)" Title="Debit" FormatString="{0:C2}" Width="12%" />
        <RadzenDataGridColumn Property="@nameof(BankTransactionViewModel.Credit)" Title="Credit" FormatString="{0:C2}" Width="12%" />
        <RadzenDataGridColumn Property="@nameof(BankTransactionViewModel.Balance)" Title="Balance" FormatString="{0:C2}" Width="12%" />
        <RadzenDataGridColumn Property="@nameof(BankTransactionViewModel.Id)" Width="5%" Sortable="false">
            <Template Context="bank">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.2rem">
                    @if (bank.HasCreditDetails)
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall" Icon="list_alt"
                                      Click="async() => await OpenCreditTransactionsDialogAsync(bank.Id)"
                                      title="View related credit card transactions" />
                    }
                    else if (bank.HasDepositDetails)
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.ExtraSmall" Icon="list_alt_check"
                                      Click="async() => await OpenDepositDialogAsync(bank.Id)"
                                      title="View related deposit items" />
                    }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public bool IsEditMode { get; set; }
    [Parameter]
    public BankTransactionFilterModel FilterModel { get; set; }
    [Parameter]
    public BalanceSummaryViewModel BalanceSummaryModel { get; set; }
    [Parameter]
    public EventCallback<BankTransactionFilterModel> OnLoadBalanceSummary { get; set; }

    private int _pageSize = PageSize.Size_50;
    private bool _isLoading = false;
    private ResponseModel<List<BankTransactionViewModel>> _data = new();

    // COMPONENTS
    private RadzenDataGrid<BankTransactionViewModel> _grid;

    // PUBLIC METHODS
    public async Task RefreshGridAsync()
    {
        await _grid.RefreshDataAsync();
    }

    public async Task FilterGridAsync(BankTransactionFilterModel filterModel)
    {
        FilterModel = filterModel;
        await RefreshGridAsync();
    }

    public async Task LoadBalanceSummaryAsync()
    {
        await OnLoadBalanceSummary.InvokeAsync(FilterModel);
    }

    // GRID ACTIONS
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;

        FilterModel.CountNumber = args.Top.Value;
        FilterModel.StartIndex = args.Skip.Value;

        FilterModel.Sidx = args.Sorts.FirstOrDefault()?.Property;
        FilterModel.Sord = args.Sorts.FirstOrDefault()?.SortOrder.ToString();

        _data = await _apiService.SearchBankTransactionsAsync(FilterModel);

        await LoadBalanceSummaryAsync();

        _isLoading = false;
    }

    private void OnCellContextMenu(DataGridCellMouseEventArgs<BankTransactionViewModel> args)
    {
        if (!IsEditMode || !args.Data.CanSplit)
        {
            return;
        }

        var menuItems = new List<ContextMenuItem>()
            {
                new ContextMenuItem(){ Text = "Split", Value = "Split", Icon = "splitscreen_vertical_add" },
            };
        _contextMenuService.Open(args, menuItems, async (e) => await HandleClickContextMenuItemAsync((string)e.Value, args.Data));
    }

    private void OnRowRender(RowRenderEventArgs<BankTransactionViewModel> args)
    {
        if (!IsEditMode)
        {
            return;
        }

        if (args.Data.ReconciledFlag || args.Data.Debit > 0)
        {
            args.Attributes.Add("reconciled", "reconciled");
        }
        else if ((args.Data.Credit) < args.Data.Balance)
        {
            args.Attributes.Add("over-amount", "over-amount");
        }
    }

    // USER ACTIONS
    private async Task OpenSplitBankTransactionDialogAsync(BankTransactionViewModel bankTransaction)
    {
        var deposit = bankTransaction.HasDepositDetails ? await GetDepositBatchAsync(bankTransaction.Id) : null;
        var title = "Split Bank Transaction";
        var paramsDic = new Dictionary<string, object>()
            {
                { "ViewModel", bankTransaction },
                { "Deposit", deposit },
                { "OnRefreshGrid", EventCallback.Factory.Create(this, RefreshGridAsync) },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.Large,
            };

        await _dialogService.OpenAsync<SplitBankTransactionForm>(title, paramsDic, options);
    }

    private async Task OpenCreditTransactionsDialogAsync(int bankId)
    {
        var credits = await GetCreditTransactionsAsync(bankId) ?? new();
        var title = "Credit Transactions";
        var paramsDic = new Dictionary<string, object>()
            {
                { "CreditTransactions", credits },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.ExtraLarge,
            };

        await _dialogService.OpenAsync<TableCreditTransactions>(title, paramsDic, options);
    }

    private async Task OpenDepositDialogAsync(int bankId)
    {
        var deposit = await GetDepositBatchAsync(bankId) ?? new();
        var title = "Deposit";
        var paramsDic = new Dictionary<string, object>()
            {
                { "Deposit", deposit },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.Large,
            };

        await _dialogService.OpenAsync<TableDepositItems>(title, paramsDic, options);
    }

    // SUPPORT METHODS
    private async Task HandleClickContextMenuItemAsync(string eventValue, BankTransactionViewModel bankTransaction)
    {
        if (eventValue == "Split")
        {
            await OpenSplitBankTransactionDialogAsync(bankTransaction);
        }
    }

    private async Task<List<CreditTransactionViewModel>> GetCreditTransactionsAsync(int bankId)
    {
        var creditsRes = await _apiService.GetCreditTransactionsByBankIdAsync(bankId);

        if (!creditsRes.Success)
        {
            _notifyService.NotifyErrors("Get Credit Transactions", creditsRes.Messages);
            return null;
        }

        return creditsRes.Data;
    }

    private async Task<DepositViewModel> GetDepositBatchAsync(int bankId)
    {
        var depositRes = await _apiService.GetDepositByBankIdAsync(bankId);

        if (!depositRes.Success)
        {
            _notifyService.NotifyErrors("Get Deposit Batch", depositRes.Messages);
            return null;
        }

        return depositRes.Data;
    }
}
