@inject DialogService _dialogService

<RadzenFieldset Text="Batch Transactions">
    <RadzenTemplateForm TItem="BatchTransactionFilterModel" Data="FilterModel" Submit="FilterGridAsync">
        <RadzenRow>
            <RadzenColumn Size="12" SizeMD="3">
                <RadzenLabel Text="Payment Type" Component="PaymentType" class="rz-text-subtitle2" />
                <RadzenDropDown @bind-Value="FilterModel.BatchType" Name="PaymentType" AllowClear="true"
                                Placeholder="---All---" Data="PaymentTypes" Style="width: 100%;" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="3">
                <RadzenLabel Text="From Date" Component="FromDate" class="rz-text-subtitle2" />
                <RadzenDatePicker @bind-Value="FilterModel.FromDate" Name="FromDate"
                                  AllowClear="true" AllowInput="false"
                                  DateFormat="MM/dd/yyyy" Placeholder="MM/dd/yyyy" Style="width: 100%;" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="3">
                <RadzenLabel Text="Search Text" Component="SearchText" class="rz-text-subtitle2" />
                <RadzenTextBox @bind-Value="FilterModel.SearchText" Name="SearchText" Style="width: 100%;" Placeholder="Search Text" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="3">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.End" Gap="0.5rem" Style="height: 100%;">
                    <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Icon="filter_alt"
                                  title="Filter batch transactions" />
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Warning" Icon="ink_eraser"
                                  Click="ClearFilterAsync"
                                  title="Clear filter fields" />
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Icon="control_point_duplicate"
                                  Click="OpenCreateBatchAdjustmentAsync"
                                  title="Add batch transaction adjustment" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenTemplateForm>
</RadzenFieldset>

@code {
    [Parameter]
    public BatchTransactionFilterModel FilterModel { get; set; }
    [Parameter]
    public ReconciliationViewModel LastTimeReconciliation { get; set; }
    [Parameter]
    public Dictionary<int, string> ActiveLocations { get; set; }
    [Parameter]
    public List<string> PaymentTypes { get; set; }

    [Parameter]
    public EventCallback<BatchTransactionFilterModel> OnFilterGrid { get; set; }
    [Parameter]
    public EventCallback OnRefreshGrid { get; set; }

    // SUPPORT METHODS
    private async Task FilterGridAsync(BatchTransactionFilterModel filterModel)
    {
        FilterModel = filterModel;
        await OnFilterGrid.InvokeAsync(filterModel);
    }

    private async Task RefreshGridAsync()
    {
        await OnRefreshGrid.InvokeAsync();
    }

    private async Task ClearFilterAsync()
    {
        var lastTime = LastTimeReconciliation.ReconciledThru;
        var model = new BatchTransactionFilterModel()
            {
                FromDate = (new DateTime(lastTime.Year, lastTime.Month, 1)).AddMonths(-6)
            };

        await FilterGridAsync(model);
    }

    private async Task OpenCreateBatchAdjustmentAsync()
    {
        var createModel = new BatchAdjustmentCreateModel()
            {
                PostDate = DateTime.Now.Date,
                BatchOwner = "haotm"
            };
        var title = "Create Batch Transaction Adjustment";
        var paramsDic = new Dictionary<string, object>()
            {
                { "CreateModel", createModel },
                { "ActiveLocations", ActiveLocations },
                { "PaymentTypes", PaymentTypes },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.Default,
            };

        await _dialogService.OpenAsync<CreateBatchAdjustmentForm>(title, paramsDic, options);
    }
}
