@inject IApiService _apiService
@inject DialogService _dialogService
@inject NotificationService _notifyService

<RadzenRow Gap="0">
    <RadzenColumn SizeMD="9" SizeSM="12">
        <RadzenTemplateForm TItem="BankTransactionFilterModel" Data="FilterModel" Submit="FilterGridAsync">
            <RadzenFieldset Text="@($"Bank Transactions - Last Time Reconciliation: {LastTimeReconciliation.DateThruAndBy}")"
                            class="custom-fieldset">
                <RadzenRow Gap="1rem">
                    <RadzenColumn SizeLG="4" SizeSM="6">
                        <RadzenStack Gap="0.2rem">
                            <RadzenLabel Text="Payment Type" Component="PaymentType" class="rz-text-subtitle2" />
                            <RadzenDropDown @bind-Value="FilterModel.BatchType" Name="PaymentType" AllowClear="true"
                                            Placeholder="---All---" Data="PaymentTypes" Style="width: 100%;" />
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn SizeLG="4" SizeSM="6">
                        <RadzenStack Gap="0.2rem">
                            <RadzenLabel Text="Reconcile To" Component="ReconciledDate" class="rz-text-subtitle2" />
                            <RadzenDatePicker @bind-Value="FilterModel.ReconciledDate" Name="ReconciledDate"
                                              AllowClear="true" AllowInput="false"
                                              DateFormat="MM/dd/yyyy" Placeholder="MM/dd/yyyy" Style="width: 100%;" />
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn SizeLG="4" SizeSM="12">
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" AlignItems="AlignItems.End" Gap="0.5rem" Style="height: 100%;">
                            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Icon="filter_alt"
                                          title="Filter bank transactions" />
                            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Warning" Icon="ink_eraser"
                                          Click="ClearFilterAsync"
                                          title="Clear filter fields" />
                            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Icon="control_point_duplicate"
                                          Click="OpenCreateBankAdjustmentAsync"
                                          title="Add bank transaction adjustment" />
                            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Success" Icon="task_alt"
                                          Click="ConfirmAndCreateReconciliationAsync"
                                          title="Mark reconciliation as completed" />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenFieldset>
        </RadzenTemplateForm>
    </RadzenColumn>
    <RadzenColumn SizeMD="3" SizeSM="12">
        <BalanceSummary BalanceSummaryModel="BalanceSummaryModel" />
    </RadzenColumn>
</RadzenRow>

@code {
    [Parameter]
    public BankTransactionFilterModel FilterModel { get; set; }
    [Parameter]
    public BalanceSummaryViewModel BalanceSummaryModel { get; set; }
    [Parameter]
    public ReconciliationViewModel LastTimeReconciliation { get; set; }
    [Parameter]
    public List<string> PaymentTypes { get; set; }

    [Parameter]
    public EventCallback<BankTransactionFilterModel> OnFilterGrid { get; set; }
    [Parameter]
    public EventCallback OnRefreshGrid { get; set; }

    // SUPPORT METHODS
    private async Task FilterGridAsync(BankTransactionFilterModel filterModel)
    {
        FilterModel = filterModel;
        await OnFilterGrid.InvokeAsync(filterModel);
    }

    private async Task RefreshGridAsync()
    {
        await OnRefreshGrid.InvokeAsync();
    }

    private async Task ClearFilterAsync()
    {
        var model = new BankTransactionFilterModel()
            {
                ReconciledDate = LastTimeReconciliation.ReconciledThru.ToLastDateOfNextMonth()
            };
        await FilterGridAsync(model);
    }

    private async Task OpenCreateBankAdjustmentAsync()
    {
        var createModel = new BankAdjustmentCreateModel()
            {
                PostDate = FilterModel.ReconciledDate,
                Reference = $"ADJ-{DateTime.Now:yyyyMMddHHmm}",
                Description = "haotm-",
                TransactionType = TransactionType.REVENUE,
            };
        var title = "Create Bank Transaction Adjustment";
        var paramsDic = new Dictionary<string, object>()
            {
                { "CreateModel", createModel },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.Default,
            };

        await _dialogService.OpenAsync<CreateBankAdjustmentForm>(title, paramsDic, options);
    }

    private async Task ConfirmAndCreateReconciliationAsync()
    {
        var confirmMessage = $"Do you really want to mark the reconciliation to {FilterModel.ReconciledDate.Value.ToString("MM/dd/yyyy")} as completed?";

        var result = await _dialogService.Confirm(confirmMessage, $"Complete Reconciliation",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (result == null || result == false)
        {
            return;
        }
    }
}
