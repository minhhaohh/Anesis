@inject IApiService _apiService
@inject DialogService _dialogService
@inject NotificationService _notifyService
@inject ContextMenuService _contextMenuService

<RadzenDataGrid @ref="_grid" TItem="BatchTransactionViewModel" IsLoading="_isLoading"
                Density="Density.Compact" SelectionMode="DataGridSelectionMode.Single"
                Count="_data.TotalCount" Data="_data.Data" KeyProperty="Id" LoadData="LoadDataAsync"
                AllowSorting="true" AllowPaging="true" ShowPagingSummary="true"
                PageSizeOptions="PageSize.GetAll()" PageSize="_pageSize" PageNumbersCount="3"
                PageSizeText="" PagingSummaryFormat="Page {0} of {1} (total {2} records)"
                PagerHorizontalAlign="HorizontalAlign.Center" Style="max-height: 640px;"
                CellContextMenu="OnCellContextMenu" CellClick="OnCellClick">
    <Columns>
        <RadzenDataGridColumn TItem="BatchTransactionViewModel" Property="@nameof(BatchTransactionViewModel.BankTransactionId)" Title="#BankID"
                              IsInEditMode="IsEditing" Width="12%" CssClass="rz-py-0">
            <Template Context="batch">
                <RadzenText Text="@batch.BankTransactionId.ToString()" TextStyle="TextStyle.Subtitle2" class="rz-m-0" />
            </Template>
            <EditTemplate Context="batch">
                <RadzenNumeric @bind-Value="batch.BankTransactionId" TValue="int?" Style="width:100%"
                               Change="async (bankId) => await UpdateLinkedBankIdAsync(batch.Id, bankId)" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(BatchTransactionViewModel.Id)" Title="#ID" Width="10%" />
        <RadzenDataGridColumn Property="@nameof(BatchTransactionViewModel.PostDate)" Title="Date" FormatString="{0:MM-dd-yyyy}" Width="12%" />
        <RadzenDataGridColumn Property="@nameof(BatchTransactionViewModel.BatchId)" Title="Batch ID" Width="12%" />
        <RadzenDataGridColumn Property="@nameof(BatchTransactionViewModel.PaymentFrom)" Title="Payment From" Width="22%" />
        <RadzenDataGridColumn Property="@nameof(BatchTransactionViewModel.PaymentType)" Title="P.Type" Width="10%" />
        <RadzenDataGridColumn Property="@nameof(BatchTransactionViewModel.TransactionType)" Title="T.Type" Width="10%" />
        <RadzenDataGridColumn Property="@nameof(BatchTransactionViewModel.PaymentAmount)" Title="Amount" FormatString="{0:C2}" Width="12%" />
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public bool IsEditMode { get; set; }
    [Parameter]
    public BatchTransactionFilterModel FilterModel { get; set; }
    [Parameter]
    public EventCallback OnRefreshBankGrid { get; set; }

    private int _pageSize = PageSize.Size_50;
    private bool _isLoading = false;
    private ResponseModel<List<BatchTransactionViewModel>> _data = new();

    // CELL EDITING
    private string _columnEditing;
    private BatchTransactionViewModel _batchToUpdate = new();

    // COMPONENTS
    private RadzenDataGrid<BatchTransactionViewModel> _grid;

    // PUBLIC METHODS
    public async Task RefreshGridAsync()
    {
        await _grid.RefreshDataAsync();
    }

    public async Task FilterGridAsync(BatchTransactionFilterModel filterModel)
    {
        FilterModel = filterModel;
        await RefreshGridAsync();
    }

    public async Task RefreshBankGridAsync()
    {
        await OnRefreshBankGrid.InvokeAsync();
    }

    // GRID ACTIONS
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;

        FilterModel.CountNumber = args.Top.Value;
        FilterModel.StartIndex = args.Skip.Value;

        FilterModel.Sidx = args.Sorts.FirstOrDefault()?.Property;
        FilterModel.Sord = args.Sorts.FirstOrDefault()?.SortOrder.ToString();

        _data = await _apiService.SearchBatchTransactionsAsync(FilterModel);

        _isLoading = false;
    }

    private void OnCellContextMenu(DataGridCellMouseEventArgs<BatchTransactionViewModel> args)
    {
        if (!IsEditMode)
        {
            return;
        }

        var menuItems = new List<ContextMenuItem>()
            {
                new ContextMenuItem(){ Text = "Split", Value = "Split", Icon = "splitscreen_vertical_add" },
                new ContextMenuItem(){ Text = "Move to BSC", Value = "Move", Icon = "tab_move" },
            };
        _contextMenuService.Open(args, menuItems, async (e) => await HandleClickContextMenuItemAsync((string)e.Value, args.Data));
    }

    private void OnCellClick(DataGridCellMouseEventArgs<BatchTransactionViewModel> args)
    {
        _columnEditing = args.Column.Property;

        if (_columnEditing != nameof(BatchTransactionViewModel.BankTransactionId))
        {
            return;
        }

        EditRow(args.Data);
    }

    // USER ACTIONS
    private async Task<bool> UpdateLinkedBankIdAsync(int batchId, int? bankId)
    {
        if (bankId > 0)
        {
            return await LinkBankTransactionAsync(batchId, bankId.Value);
        }
        else
        {
            return await UnlinkBankTransactionAsync(batchId);
        }
    }

    private async Task<bool> LinkBankTransactionAsync(int batchId, int bankId)
    {
        var linkModel = new BatchLinkBankIdModel()
            {
                BatchTransactionId = batchId,
                BankTransactionId = bankId,
            };
        var linkRes = await _apiService.LinkBankIdToBatchTransactionAsync(linkModel);

        if (!linkRes.Success)
        {
            _notifyService.NotifyErrors("Link Bank Transaction", linkRes.Messages);
        }
        else
        {
            _notifyService.NotifySuccess("Link Bank Transaction", linkRes.Data);

            UpdateRowGrid();

            await RefreshBankGridAsync();
        }

        return linkRes.Success;
    }

    private async Task<bool> UnlinkBankTransactionAsync(int batchId)
    {
        var unlinkRes = await _apiService.UnlinkBankIdFromBatchTransactionAsync(batchId);

        if (!unlinkRes.Success)
        {
            _notifyService.NotifyErrors("Unlink Bank Transaction", unlinkRes.Messages);
        }
        else
        {
            _notifyService.NotifySuccess("Unlink Bank Transaction", unlinkRes.Data);

            UpdateRowGrid();

            await RefreshBankGridAsync();
        }

        return unlinkRes.Success;
    }

    private async Task OpenSplitBatchTransactionDialogAsync(BatchTransactionViewModel batchTransaction)
    {
        var title = "Split Batch Transaction";
        var paramsDic = new Dictionary<string, object>()
            {
                { "ViewModel", batchTransaction },
                { "OnRefreshGrid", EventCallback.Factory.Create(this, RefreshGridAsync) },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.Default,
            };

        await _dialogService.OpenAsync<SplitBatchTransactionForm>(title, paramsDic, options);
    }

    private async Task ConfirmAndMoveBatchTransactionAsync(BatchTransactionViewModel batchTransaction)
    {
        var confirmMessage = GetMoveBatchTransactionConfirmMessage(batchTransaction);

        var result = await _dialogService.Confirm(confirmMessage, $"Move Batch Transaction #{batchTransaction.Id}",
           new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (result == null || result == false)
            return;
    }

    // SUPPORT METHODS
    private RenderFragment GetMoveBatchTransactionConfirmMessage(BatchTransactionViewModel batchTransaction)
    {
        return __builder =>
        {
            <RadzenStack>
                <RadzenRow RowGap="0">
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenText TextStyle="TextStyle.Body2">Post Date:</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenText TextStyle="TextStyle.Subtitle2">@batchTransaction.PostDate.ToString("MM/dd/yyyy")</RadzenText>
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenText TextStyle="TextStyle.Body2">Batch Owner:</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenText TextStyle="TextStyle.Subtitle2">@batchTransaction.BatchOwner</RadzenText>
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenText TextStyle="TextStyle.Body2">Document No:</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenText TextStyle="TextStyle.Subtitle2">@batchTransaction.DocNo</RadzenText>
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenText TextStyle="TextStyle.Body2">Payment From:</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenText TextStyle="TextStyle.Subtitle2">@batchTransaction.PaymentFrom</RadzenText>
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenText TextStyle="TextStyle.Body2">Payment Type:</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenText TextStyle="TextStyle.Subtitle2">@batchTransaction.PaymentType</RadzenText>
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenText TextStyle="TextStyle.Body2">Payment Amount:</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenText TextStyle="TextStyle.Subtitle2">@batchTransaction.PaymentAmount.ToString("C2")</RadzenText>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenText TextStyle="TextStyle.Body2">Do you really want to move batch transaction #<b>@batchTransaction.Id</b> to <b>Bel-Red (BSC)</b> instance?</RadzenText>
            </RadzenStack>
            // <div>
            //     <div>Post Date: <i>@batchTransaction.PostDate.ToString("MM/dd/yyyy")</i></div>
            //     <div>Batch Owner: <i>@batchTransaction.BatchOwner</i></div>
            //     <div>Document No: <i>@batchTransaction.DocNo</i></div>
            //     <div>Payment From: <i>@batchTransaction.PaymentFrom</i></div>
            //     <div>Payment Type: <i>@batchTransaction.PaymentType</i></div>
            //     <div>Payment Amount: <i>@batchTransaction.PaymentAmount.ToString("C2")</i></div>
            //     <p>Do you really want to move batch transaction #<b>@batchTransaction.Id</b> to <b>Bel-Red (BSC)</b> instance?</p>
            // </div>
        };
    }

    private async Task HandleClickContextMenuItemAsync(string eventValue, BatchTransactionViewModel batchTransaction)
    {
        if (eventValue == "Split")
        {
            await OpenSplitBatchTransactionDialogAsync(batchTransaction);
        }
        else if (eventValue == "Move")
        {
            await ConfirmAndMoveBatchTransactionAsync(batchTransaction);
        }
    }

    private bool IsEditing(string columnName, BatchTransactionViewModel batch)
    {
        return IsEditMode && _columnEditing == columnName && _batchToUpdate == batch;
    }

    private void EditRow(BatchTransactionViewModel batch)
    {
        _batchToUpdate = batch;

        _grid.EditRow(batch);
    }

    private void UpdateRowGrid()
    {
        _grid.UpdateRow(_batchToUpdate);

        _batchToUpdate = new();
    }
}
