<RadzenFieldset Text="Filter Panel" AllowCollapse="true"
                Collapse="async () => await ToggleFilterPanelAsync(true)"
                Expand="async () => await ToggleFilterPanelAsync(false)">
    <RadzenTemplateForm TItem="DeviceFilterModel" Data="FilterModel" Submit="FilterGridAsync">
        <RadzenRow>
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenLabel Text="Category" Component="Category" class="rz-text-subtitle2" />
                <RadzenDropDown @bind-Value="FilterModel.Category" Name="Category"
                                Data="DeviceCategories" AllowClear="true"
                                TextProperty="Value" ValueProperty="Key"
                                Placeholder="---All---" Style="width: 100%;" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenLabel Text="Device Name" Component="DeviceName" class="rz-text-subtitle2" />
                <RadzenTextBox @bind-Value="FilterModel.Name" Name="DeviceName" Placeholder="Device Name" Style="width: 100%;" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenLabel Text="Vendor Name" Component="VendorName" class="rz-text-subtitle2" />
                <RadzenTextBox @bind-Value="FilterModel.VendorName" Name="VendorName" Placeholder="Vendor Name" Style="width: 100%;" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="height: 100%;">
                    <RadzenSwitch @bind-Value="FilterModel.ActiveOnly" Name="ActiveOnly" />
                    <RadzenLabel Text="Active Only" Component="ActiveOnly" class="rz-text-subtitle2" />
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.End" Gap="0.5rem" Style="height: 100%;">
                    <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary"
                                  Text="Filter" Icon="filter_alt" />
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Warning"
                                  Text="Clear" Icon="ink_eraser" Click="ClearFilterAsync" />
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Info"
                                  Text="Refresh" Icon="refresh" Click="RefreshGridAsync" />
                    @if (CanEditDevice)
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Success"
                                      Text="New" Icon="add" Click="OpenCreateDeviceDialogAsync" />
                    }
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenTemplateForm>
</RadzenFieldset>

@code {
    [Parameter]
    public bool CanEditDevice { get; set; }
    [Parameter]
    public DeviceFilterModel FilterModel { get; set; }
    [Parameter]
    public bool CollapsedFilterPanel { get; set; }
    [Parameter]
    public Dictionary<int, string> DeviceCategories { get; set; }

    [Parameter]
    public EventCallback<bool> OnResizeGrid { get; set; }
    [Parameter]
    public EventCallback<DeviceFilterModel> OnFilterGrid { get; set; }
    [Parameter]
    public EventCallback OnRefreshGrid { get; set; }
    [Parameter]
    public EventCallback<int> OnOpenEditDeviceDialog { get; set; }

    // SUPPORT METHODS
    private async Task ToggleFilterPanelAsync(bool collapsed)
    {
        CollapsedFilterPanel = collapsed;
        await ResizeGridAsync(CollapsedFilterPanel);
    }

    private async Task ResizeGridAsync(bool collapsed)
    {
        await OnResizeGrid.InvokeAsync(collapsed);
    }

    private async Task FilterGridAsync(DeviceFilterModel filterModel)
    {
        FilterModel = filterModel;
        await OnFilterGrid.InvokeAsync(filterModel);
    }

    private async Task RefreshGridAsync()
    {
        await OnRefreshGrid.InvokeAsync();
    }

    private async Task ClearFilterAsync()
    {
        var model = new DeviceFilterModel();

        await FilterGridAsync(model);
    }

    private async Task OpenCreateDeviceDialogAsync()
    {
        await OnOpenEditDeviceDialog.InvokeAsync(0);
    }
}
