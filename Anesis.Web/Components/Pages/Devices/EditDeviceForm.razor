@inject IApiService _apiService
@inject NotificationService _notifyService
@inject DialogService _dialogService

<RadzenTemplateForm TItem="DeviceWithCostEditModel" Data="EditModel" Submit="SaveDeviceAsync">
    <RadzenStack>
        <RadzenFieldset Text="Device Information">
            <RadzenStack Gap="0.5rem">
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Device Name" Component="DeviceName" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenTextBox @bind-Value="EditModel.Name" Name="DeviceName" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Device Code" Component="DeviceCode" class="rz-text-subtitle2" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenTextBox @bind-Value="EditModel.DeviceCode" Name="DeviceCode" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Description" Component="Description" class="rz-text-subtitle2" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenTextArea @bind-Value="EditModel.Description" Name="Description" Rows="3" Style="width: 100%" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Vendor Name" Component="VendorName" class="rz-text-subtitle2" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenTextBox @bind-Value="EditModel.VendorName" Name="VendorName" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Category" Component="Category" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenDropDown @bind-Value="EditModel.Category" Name="Category"
                                        Data="@DeviceCategories" AllowClear="true"
                                        TextProperty="Value" ValueProperty="Key"
                                        Placeholder="---Select---" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Display Order" Component="DisplayOrder" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenNumeric @bind-Value="EditModel.DisplayOrder" Name="DisplayOrder" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Active" Component="IsActive" class="rz-text-subtitle2" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenCheckBox @bind-Value="EditModel.IsActive" Name="IsActive" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Total Cost" Component="AppliedCost" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenFormField Style="width: 100%;" class="custom-input-group">
                            <Start>
                                <RadzenIcon Icon="attach_money" />
                            </Start>
                            <ChildContent>
                                <RadzenNumeric @bind-Value="EditModel.AppliedCost" Name="AppliedCost" Style="width: 100%;" />
                            </ChildContent>
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Effective Date" Component="EffectiveDate" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenDatePicker @bind-Value="EditModel.EffectiveDate" Name="EffectiveDate"
                                          AllowClear="true" AllowInput="false"
                                          DateFormat="MM/dd/yyyy" Placeholder="MM/dd/yyyy" Style="width: 100%;" />
                        @if (EditModel.Id > 0)
                        {
                            <RadzenCheckBox @bind-Value="EditModel.OverwriteEffDate" Name="OverwriteEffDate" />
                            <RadzenLabel Text="Overwrite effective date, do not add new effective date." Component="OverwriteEffDate" class="rz-color-danger" />
                        }
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Notes" Component="Notes" class="rz-text-subtitle2" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenTextArea @bind-Value="EditModel.Notes" Name="Notes" Rows="3" Style="width: 100%" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenFieldset>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary"
                          Text="Save" Icon="save" />
            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base"
                          Text="Close" Click="() => _dialogService.Close()" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter]
    public DeviceWithCostEditModel EditModel { get; set; }
    [Parameter]
    public Dictionary<int, string> DeviceCategories { get; set; }

    [Parameter]
    public EventCallback OnRefreshGrid { get; set; }

    // SUPPORT METHODS
    private async Task SaveDeviceAsync(DeviceWithCostEditModel device)
    {
        if (device.Id > 0)
        {
            await UpdateDeviceAsync(device);
        }
        else
        {
            await CreateDeviceAsync(device);
        }
    }

    private async Task UpdateDeviceAsync(DeviceWithCostEditModel device)
    {
        var updateDeviceRes = await _apiService.UpdateDeviceAsync(device);

        if (updateDeviceRes.Success)
        {
            _notifyService.NotifySuccess("Update Device Information", updateDeviceRes.Data);
            _dialogService.Close();
            await RefreshGridAsync();
        }
        else
        {
            _notifyService.NotifyErrors("Update Device Information", updateDeviceRes.Messages);
        }
    }

    private async Task CreateDeviceAsync(DeviceWithCostEditModel device)
    {
        var createDeviceRes = await _apiService.CreateDeviceAsync(device);

        if (createDeviceRes.Success)
        {
            _notifyService.NotifySuccess("Create New Device", createDeviceRes.Data);
            _dialogService.Close();
            await RefreshGridAsync();
        }
        else
        {
            _notifyService.NotifyErrors("Create New Device", createDeviceRes.Messages);
        }
    }

    private async Task RefreshGridAsync()
    {
        await OnRefreshGrid.InvokeAsync();
    }
}
