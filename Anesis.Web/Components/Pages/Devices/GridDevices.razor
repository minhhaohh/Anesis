@inject IApiService _apiService
@inject DialogService _dialogService
@inject NotificationService _notifyService

<RadzenDataGrid @ref="_grid" TItem="DeviceWithCostViewModel" IsLoading="_isLoading"
                Count="_data.TotalCount" Data="_data.Data" KeyProperty="Id" LoadData="LoadDataAsync"
                AllowSorting="true" AllowPaging="true" ShowPagingSummary="true"
                PageSizeOptions="PageSize.GetAll()" PageSize="_pageSize"
                PagingSummaryFormat="Page {0} of {1} (total {2} records)"
                PagerHorizontalAlign="HorizontalAlign.Center" Style="@_gridStyle">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(DeviceWithCostViewModel.Id)" Title="#ID"
                              Width="10%" CssClass="rz-text-subtitle2" />
        <RadzenDataGridColumn Property="@nameof(DeviceWithCostViewModel.Name)" Title="Device Name" Width="40%" />
        <RadzenDataGridColumn Property="@nameof(DeviceWithCostViewModel.VendorName)" Title="Vendor Name" Width="15%" />
        <RadzenDataGridColumn Property="@nameof(DeviceWithCostViewModel.CategoryName)" Title="Category" Width="15%" Sortable="false" />
        <RadzenDataGridColumn Property="@nameof(DeviceWithCostViewModel.DisplayOrder)" Title="Order" Width="10%">
            <Template Context="device">
                <RadzenText Text="@device.DisplayOrder.ToString()" />
            </Template>
            <EditTemplate Context="device">
                <RadzenNumeric @bind-Value="device.DisplayOrder" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(DeviceWithCostViewModel.IsActive)" Title="Active" Width="10%">
            <Template Context="device">
                @if (CanEditDevice)
                {
                    @if (device.IsActive)
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small"
                                      Shade="Shade.Lighter" Icon="check" Click="async () => await ToggleFlagAsync(device.Id, nameof(DeviceWithCostViewModel.IsActive))" />
                    }
                    else
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                      Shade="Shade.Lighter" Icon="close" Click="async () => await ToggleFlagAsync(device.Id, nameof(DeviceWithCostViewModel.IsActive))" />
                    }
                }
                else 
                {
                    @if (device.IsActive)
                    {
                        <RadzenIcon Icon="check" IconColor="@Colors.Success" />
                    }
                    else
                    {
                        <RadzenButton Icon="close" IconColor="@Colors.Danger" />
                    }
                }

                
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(DeviceWithCostViewModel.VendorCost)" Title="Base Cost" FormatString="{0:C2}" Width="15%" />
        <RadzenDataGridColumn Property="@nameof(DeviceWithCostViewModel.AppliedCost)" Title="Total Cost" FormatString="{0:C2}" Width="15%" />
        <RadzenDataGridColumn Property="@nameof(DeviceWithCostViewModel.EffectiveDate)" Title="Effective Date" FormatString="{0:MM-dd-yyyy}" Width="15%" />
        <RadzenDataGridColumn Property="@nameof(DeviceWithCostViewModel.Id)" Width="20%" Sortable="false">
            <Template Context="device">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.2rem">
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Icon="manage_history"
                                  Click="async () => await OpenPriceHistoryDialogAsync(device.Id)"
                                  title="@($"View price history of device #{device.Id}")" />
                    @if (CanEditDevice)
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Icon="edit"
                                      Click="async () => await OpenEditDeviceDialogAsync(device.Id)"
                                      title="@($"Edit device #{device.Id}")" />
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Icon="attach_money"
                                      Click="async () => await OpenEditCostDialogAsync(device.Id)"
                                      title="@($"Edit cost of device #{device.Id}")" />
                    }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public bool CanEditDevice { get; set; }
    [Parameter]
    public DeviceFilterModel FilterModel { get; set; }
    [Parameter]
    public bool CollapsedFilterPanel { get; set; }

    [Parameter]
    public EventCallback<int> OnOpenEditDeviceDialog { get; set; }

    private string _gridStyle = "";
    private int _pageSize = PageSize.Default();
    private bool _isLoading = false;
    private ResponseModel<List<DeviceWithCostViewModel>> _data = new();

    // COMPONENTS
    private RadzenDataGrid<DeviceWithCostViewModel> _grid;

    // OVERRIDE METHODS
    protected override void OnParametersSet()
    {
        _gridStyle = CollapsedFilterPanel ? "max-height: 740px;" : "max-height: 640px;";
    }

    // PUBLIC METHODS
    public void ResizeGrid(bool collapsedFilterPanel)
    {
        CollapsedFilterPanel = collapsedFilterPanel;
        _gridStyle = CollapsedFilterPanel ? "max-height: 740px;" : "max-height: 640px;";
    }

    public async Task RefreshGridAsync()
    {
        await _grid.RefreshDataAsync();
    }

    public async Task FilterGridAsync(DeviceFilterModel filterModel)
    {
        FilterModel = filterModel;
        await RefreshGridAsync();
    }

    // SUPPORT METHODS
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;

        FilterModel.CountNumber = args.Top.Value;
        FilterModel.StartIndex = args.Skip.Value;

        FilterModel.Sidx = args.Sorts.FirstOrDefault()?.Property;
        FilterModel.Sord = args.Sorts.FirstOrDefault()?.SortOrder.ToString();

        _data = await _apiService.SearchDevicesAsync(FilterModel);

        _isLoading = false;
    }

    private async Task ToggleFlagAsync(int id, string fieldName)
    {
        var toggleModel = new FlagToggleModel()
            {
                Id = id,
                FieldName = fieldName,
            };
        var updateDeviceRes = await _apiService.ToggleDeviceFlagAsync(toggleModel);

        if (updateDeviceRes.Success)
        {
            _notifyService.NotifySuccess("Update Device Information", $"Updated device #{id} successful");
            await RefreshGridAsync();
        }
        else
        {
            _notifyService.NotifyErrors($"Update Device Information", updateDeviceRes.Messages);
        }
    }

    private async Task OpenEditCostDialogAsync(int deviceId)
    {
        var deviceCostRes = await _apiService.GetCurrentDeviceCostAsync(deviceId);

        if (!deviceCostRes.Success)
        {
            _notifyService.NotifyErrors("Get Device Cost Information", deviceCostRes.Messages);
            return;
        }

        var editCostModel = deviceCostRes.Data.ToDeviceCostEditModel();

        var title = $"Change Cost Of Device #{deviceId}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "EditCostModel", editCostModel },
                { "OnRefreshGrid", EventCallback.Factory.Create(this, RefreshGridAsync) },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.Default,
            };

        await _dialogService.OpenAsync<EditDeviceCostForm>(title, paramsDic, options);
    }

    private async Task OpenPriceHistoryDialogAsync(int id)
    {
        var priceHistoryRes = await _apiService.GetDevicePriceHistoryAsync(id);

        if (!priceHistoryRes.Success)
        {
            _notifyService.NotifyErrors("Get Device Cost History", priceHistoryRes.Messages);
            return;
        }

        var priceHistory = priceHistoryRes.Data;
        var title = $"Price History Of Device #{id}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "PriceHistory", priceHistory },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.Default,
            };

        await _dialogService.OpenAsync<TablePriceHistory>(title, paramsDic, options);
    }

    private async Task OpenEditDeviceDialogAsync(int id)
    {
        await OnOpenEditDeviceDialog.InvokeAsync(id);
    }
}
