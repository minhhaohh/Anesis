@inject IApiService _apiService
@inject DialogService _dialogService
@inject NotificationService _notifyService

<RadzenDataGrid @ref="_grid" TItem="SurgeryCaseViewModel" IsLoading="_isLoading" Density="Density.Compact"
                Count="_totalCount" Data="_data" KeyProperty="Id" LoadData="LoadDataAsync"
                AllowSorting="true" AllowPaging="true" ShowPagingSummary="true"
                PageSizeOptions="PageSize.All()" PageSize="_pageSize"
                PagingSummaryFormat="Page {0} of {1} (total {2} records)"
                PagerHorizontalAlign="HorizontalAlign.Center" Style="@_gridStyle">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.Id)" Title="#ID" Width="5%" CssClass="rz-text-subtitle2" />
        <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.EcwChartNo)" Title="Patient" Width="10%">
            <Template Context="surgeryCase">
                <div title="Chart No"><strong>@surgeryCase.EcwChartNo</strong> (@surgeryCase.ChartNo)</div>
                <div class="rz-color-primary" title="Patient Name"><strong>@surgeryCase.FirstName, @surgeryCase.LastName</strong></div>
                <div><span title="Gender">@surgeryCase.Gender</span> | <span title="Date of birth">@surgeryCase.Dob.ToString("MM-dd-yyyy")</span></div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.ProcedureName)" Title="Procedure" Width="20%">
            <Template Context="surgeryCase">
                @{
                    var colorClass = SurgeryCaseStatusColors.GetColorClass(surgeryCase.CaseStatusStr);
                }
                <div><strong title="Procedure">@surgeryCase.ProcedureName</strong></div>
                <div>
                    <span title="Surgery Date">@surgeryCase.SurgeryDate.ToString("MM-dd-yyyy") @surgeryCase.StartTime.ToTimeString(true) -> @surgeryCase.EndTime.ToTimeString(true)</span>
                    <span> | </span>
                    <strong class="@colorClass" title="Status">@surgeryCase.CaseStatusStr</strong>
                </div>
                <div title="Insurance">Insurance: <i>@surgeryCase.InsuranceName</i></div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.PrimaryProviderName)" Title="Surgery By" Width="10%">
            <Template Context="surgeryCase">
                <div class="rz-color-series-4"><strong title="Surgeon">@surgeryCase.PrimaryProviderName</strong></div>
                <div>
                    <strong title="Location">@surgeryCase.LocationName</strong>
                    <span> - </span>
                    <span title="Operating Room">@surgeryCase.RoomName</span>
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.Codes)" Title="Cpt Codes" Width="10%" Sortable="false">
            <Template Context="surgeryCase">
                @if (surgeryCase.Codes == null || surgeryCase.Codes.Count == 0)
                {
                    if (surgeryCase.CanManageCptCodes)
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"
                                      Text="Manage CPT Codes" Click="async () => await OpenManageCptCodesDialogAsync(surgeryCase)"
                                      title="@($"Manage CPT codes for surgery case #{surgeryCase.Id}")" />
                    }
                }
                else
                {
                    @if (surgeryCase.CanManageCptCodes)
                    {
                        <a href="javascript:;" class="rz-color-primary text-underline-none"
                           title="@($"Manage CPT codes for surgery case #{surgeryCase.Id}")"
                           onclick="@(async () => await OpenManageCptCodesDialogAsync(surgeryCase))">
                            <ul>
                                @foreach (var cptCode in surgeryCase.Codes)
                                {
                                    <li>@cptCode</li>
                                }
                            </ul>
                        </a>
                    }
                    else
                    {
                        <ul title="List of CPT codes">
                            @foreach (var cptCode in surgeryCase.Codes)
                            {
                                <li>@cptCode</li>
                            }
                        </ul>
                    }
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.Devices)" Title="Devices" Width="15%" Sortable="false">
            <Template Context="surgeryCase">
                @if (surgeryCase.PurchaseInvoiceId > 0)
                {
                    <div title="Linked Invoice">Inv. No: #<strong>@surgeryCase.InvoiceNumber</strong> - @surgeryCase.InvoiceAmount.ToString("C2")</div>
                }
                @if (surgeryCase.Devices == null || surgeryCase.Devices.Count == 0)
                {
                    if (surgeryCase.CanManageDevices)
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"
                                      Text="Manage Devices" Click="async () => await OpenManageDevicesDialogAsync(surgeryCase)"
                                      title="@($"Manage devices and link the invoice for surgery case #{surgeryCase.Id}")" />
                    }
                }
                else
                {
                    if (surgeryCase.CanManageDevices)
                    {
                        <a href="javascript:;" class="rz-color-primary text-underline-none"
                           title="@($"Manage devices and link the invoice for surgery case #{surgeryCase.Id}")"
                           onclick="@(async () => await OpenManageDevicesDialogAsync(surgeryCase))">
                            <ul>
                                @foreach (var device in surgeryCase.Devices)
                                {
                                    <li>@device</li>
                                }
                            </ul>
                        </a>
                    }
                    else
                    {
                        <ul title="List of devices">
                            @foreach (var device in surgeryCase.Devices)
                            {
                                <li>@device</li>
                            }
                        </ul>
                    }
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.Id)" Width="10%" Sortable="false">
            <Template Context="surgeryCase">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.2rem">
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Icon="manage_history"
                                  Click="async () => await OpenSurgeryCaseChangeLogsDialogAsync(surgeryCase.Id)"
                                  title="@($"View change logs of surgery case #{surgeryCase.Id}")" />
                    @if (surgeryCase.CanLinkInvoice)
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Icon="link"
                                      Click="async () => await OpenLinkInvoiceDialogAsync(surgeryCase)"
                                      title="@($"Link invoice for surgery case #{surgeryCase.Id}")" />
                    }
                    @if (surgeryCase.CanEditCases)
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Icon="check_circle"
                                      Click="async () => await ConfirmAndSetCompletedSurgeryCaseAsync(surgeryCase)"
                                      title="@($"Mark surgery case #{surgeryCase.Id} as completed")" />
                    }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public SurgeryCaseFilterModel FilterModel { get; set; }
    [Parameter]
    public bool CollapsedFilterPanel { get; set; }

    // GRID PROPERTIES
    private List<SurgeryCaseViewModel> _data = new();
    private int _totalCount = 0;
    private int _pageSize = PageSize.Default();
    private bool _isLoading = false;
    private string _gridStyle = "max-height: 492px;";

    // COMPONENTS
    private RadzenDataGrid<SurgeryCaseViewModel> _grid;

    // OVERRIDE METHODS
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshGridAsync();
        }
    }

    // PUBLIC METHODS
    public void ResizeGrid(bool collapsedFilterPanel)
    {
        CollapsedFilterPanel = collapsedFilterPanel;
        _gridStyle = CollapsedFilterPanel ? "max-height: 686px;" : "max-height: 492px;";
    }

    public async Task RefreshGridAsync()
    {
        await _grid.RefreshDataAsync();
    }

    public async Task FilterGridAsync(SurgeryCaseFilterModel filterModel)
    {
        FilterModel = filterModel;
        await RefreshGridAsync();
    }

    // SUPPORT METHODS
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;

        SetPageableProperties(args);

        await LoadGridDataAsync(FilterModel);

        _isLoading = false;
    }

    private void SetPageableProperties(LoadDataArgs args)
    {
        FilterModel.CountNumber = args.Top.Value;
        FilterModel.StartIndex = args.Skip.Value;

        FilterModel.Sidx = args.Sorts.FirstOrDefault()?.Property;
        FilterModel.Sord = args.Sorts.FirstOrDefault()?.SortOrder.ToString();
    }

    private async Task LoadGridDataAsync(SurgeryCaseFilterModel filterModel)
    {
        var searchRes = await _apiService.SearchSurgeryCasesAsync(filterModel);

        if (searchRes.Success)
        {
            _data = searchRes.Data;
            _totalCount = searchRes.TotalCount;
        }
        else
        {
            _notifyService.NotifyErrors("Search Surgery Cases", searchRes.Messages);

            _data = new();
            _totalCount = 0;
        }
    }

    private async Task ConfirmAndSetCompletedSurgeryCaseAsync(SurgeryCaseViewModel surgeryCase)
    {
        var confirmMessage = GetSetStatusConfirmMessage(surgeryCase, SurgeryCaseStatus.Completed);
        var result = await _dialogService.Confirm(confirmMessage, $"Set Status Of Surgery Case #{surgeryCase.Id}",
            new ConfirmOptions() { Style = "max-width: 600px;", OkButtonText = "Yes", CancelButtonText = "No" });

        if (result == null || result == false)
        {
            return;
        }

        await SetSurgeryCaseStatusAsync(surgeryCase.Id, (int)SurgeryCaseStatus.Completed);
    }

    private async Task OpenManageCptCodesDialogAsync(SurgeryCaseViewModel surgeryCase)
    {
        var title = $"Manage CPT Codes For Surgery Case #{surgeryCase.Id}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "ViewModel", surgeryCase },
                { "OnRefreshGrid", EventCallback.Factory.Create(this, RefreshGridAsync) },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.ExtraLarge,
            };

        await _dialogService.OpenAsync<ManageCptCodesForm>(title, paramsDic, options);
    }

    private async Task OpenManageDevicesDialogAsync(SurgeryCaseViewModel surgeryCase)
    {
        var title = $"Manage Devices For Surgery Case #{surgeryCase.Id}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "ViewModel", surgeryCase },
                { "OnRefreshGrid", EventCallback.Factory.Create(this, RefreshGridAsync) },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.ExtraLarge,
            };

        await _dialogService.OpenAsync<ManageDevicesForm>(title, paramsDic, options);
    }

    private async Task OpenLinkInvoiceDialogAsync(SurgeryCaseViewModel surgeryCase)
    {
        var title = $"Link Invoice To Surgery Case #{surgeryCase.Id}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "ViewModel", surgeryCase },
                { "IsDialog", true },
                { "OnRefreshGrid", EventCallback.Factory.Create(this, RefreshGridAsync) },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.ExtraLarge,
            };

        await _dialogService.OpenAsync<LinkInvoiceForm>(title, paramsDic, options);
    }

    private async Task OpenSurgeryCaseChangeLogsDialogAsync(int id)
    {
        var changeLogs = await GetSurgeryCaseChangeLogsAsync(id);

        if (changeLogs == null)
        {
            return;
        }

        var title = $"Change Logs Of Surgery Case #{id}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "ChangeLogs", changeLogs },
                { "NoChangeMessage", "There is no change with this surgery case."}
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.Large,
            };

        await _dialogService.OpenAsync<ChangeLogHistory>(title, paramsDic, options);
    }

    private RenderFragment GetSetStatusConfirmMessage(SurgeryCaseViewModel surgeryCase, SurgeryCaseStatus status)
    {
        var statusColor = SurgeryCaseStatusColors.GetColorClass(status.ToString());

        return __builder =>
        {
            <RadzenStack>
                <SurgeryCaseInfo ViewModel="surgeryCase" />

                <RadzenText TextStyle="TextStyle.Body2" class="@statusColor">
                    Do you really want to mark surgery case #<b>@surgeryCase.Id</b> as <b>@status.ToString()</b>?
                </RadzenText>
            </RadzenStack>
        };
    }

    private async Task<SurgeryCaseViewModel> GetSurgeryCaseByIdAsync(int id)
    {
        var caseResponse = await _apiService.GetSurgeryCaseByIdAsync(id);

        if (!caseResponse.Success)
        {
            _notifyService.NotifyErrors("Get Surgery Case Information", caseResponse.Messages);
            return null;
        }

        return caseResponse.Data;
    }

    private async Task<List<ChangeLogViewModel>> GetSurgeryCaseChangeLogsAsync(int id)
    {
        var changeLogsRes = await _apiService.GetSurgeryCaseChangeLogsAsync(id);

        if (!changeLogsRes.Success)
        {
            _notifyService.NotifyErrors("Get Surgery Case Change Logs", changeLogsRes.Messages);
            return null;
        }

        return changeLogsRes.Data;
    }

    private async Task SetSurgeryCaseStatusAsync(int id, int status)
    {
        var setStatusModel = new CaseSetStatusModel()
            {
                Id = id,
                Status = status
            };
        var setStatusRes = await _apiService.SetSurgeryCaseStatusAsync(setStatusModel);

        if (!setStatusRes.Success)
        {
            _notifyService.NotifyErrors("Set Surgery Case Status", setStatusRes.Messages);
        }
        else
        {
            _notifyService.NotifySuccess("Set Surgery Case Status", setStatusRes.Data);

            await RefreshGridAsync();
        }
    }
}
