@inject IApiService _apiService
@inject NotificationService _notifyService
@inject DialogService _dialogService

<RadzenStack>
    <SurgeryCaseInfo ViewModel="ViewModel" />

    <RadzenTemplateForm TItem="CaseCptCodeAddModel" Data="_addCaseCptCodeModel" Submit="AddCaseCptCodeAsync">
        <RadzenFieldset Text="Add CPT Code">
            <RadzenRow>
                <RadzenColumn SizeSM="5" SizeXS="8">
                    <RadzenStack Gap="0.5rem">
                        <RadzenLabel Text="CPT Code" Component="CptCode" class="rz-text-subtitle2 required-near" />
                        <RadzenTextBox @bind-Value="_addCaseCptCodeModel.CptCode" Name="CptCode" Style="width: 100%;" Placeholder="CPT Code" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeSM="2" SizeXS="4">
                    <RadzenStack Gap="0.5rem">
                        <RadzenLabel Text="Quantity" Component="Quantity" class="rz-text-subtitle2 required-near" />
                        <RadzenNumeric @bind-Value="_addCaseCptCodeModel.Quantity" TValue="int?" Name="Quantity" Style="width: 100%;" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeSM="5" SizeXS="8">
                    <RadzenStack Gap="0.5rem">
                        <RadzenLabel Text="Notes" Component="Notes" class="rz-text-subtitle2" />
                        <RadzenFormField Style="width: 100%;" class="custom-input-group">
                            <Start>
                            </Start>
                            <ChildContent>
                                <RadzenTextBox @bind-Value="_addCaseCptCodeModel.Notes" Name="Notes" Style="width: 100%;" />
                            </ChildContent>
                            <End>
                                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success"
                                              Text="Add" Icon="add" />
                            </End>
                        </RadzenFormField>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>
    </RadzenTemplateForm>

    <RadzenDataGrid @ref="_gridCaseCptCodes" TItem="CaseCptCodeViewModel" IsLoading="_isLoading"
                    Count="_totalCount" Data="_data" KeyProperty="Id" LoadData="LoadDataAsync"
                    AllowSorting="true" AllowPaging="true" ShowPagingSummary="true"
                    PageSizeOptions="PageSize.All()" PageSize="_pageSize"
                    PagingSummaryFormat="Page {0} of {1} (total {2} records)"
                    PagerHorizontalAlign="HorizontalAlign.Center" Style="max-height: 400px;">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(CaseCptCodeViewModel.BillingCodeId)" Title="#ID" Width="5%" CssClass="rz-text-subtitle2" />
            <RadzenDataGridColumn Property="@nameof(CaseCptCodeViewModel.CptCode)" Title="CPT Code" Width="10%" />
            <RadzenDataGridColumn Property="@nameof(CaseCptCodeViewModel.Quantity)" Title="Quantity" Width="15%">
                <Template Context="caseCptCode">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall"
                                      Shade="Shade.Lighter" Icon="remove"
                                      Click="async () => await ChangeCaseCptCodeQuantityAsync(caseCptCode.Id, caseCptCode.Quantity - 1)" />
                        <RadzenText TextStyle="TextStyle.Body2" Text="@caseCptCode.Quantity.ToString()" class="rz-m-0" />
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.ExtraSmall"
                                      Shade="Shade.Lighter" Icon="add"
                                      Click="async () => await ChangeCaseCptCodeQuantityAsync(caseCptCode.Id, caseCptCode.Quantity + 1)" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(CaseCptCodeViewModel.WorkRvu)" Title="Work RVU" Width="10%" />
            <RadzenDataGridColumn Property="@nameof(CaseCptCodeViewModel.RvuEffectiveDate)" Title="RVU Date" FormatString="{0:MM-dd-yyyy}" Width="12%" />
            <RadzenDataGridColumn Property="@nameof(CaseCptCodeViewModel.CmsAllowedAmt)" Title="CMS-Based Amt" FormatString="{0:C2}" Width="13%" />
            <RadzenDataGridColumn Property="@nameof(CaseCptCodeViewModel.ContractedPct)" Title="% Contract" FormatString="{0:P2}" Width="10%" />
            <RadzenDataGridColumn Property="@nameof(CaseCptCodeViewModel.AllowedAmtValue)" Title="Allowed Amt" FormatString="{0:C2}" Width="10%" />
            <RadzenDataGridColumn Property="@nameof(CaseCptCodeViewModel.CollectedAmount)" Title="Collected Amt" FormatString="{0:C2}" Width="10%" />
            <RadzenDataGridColumn Property="@nameof(CaseCptCodeViewModel.Id)" Width="5%" Sortable="false">
                <Template Context="caseCptCode">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.2rem">
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Icon="delete"
                                      Click="async () => await ConfirmDeleteCaseCptCodeAsync(caseCptCode.Id, caseCptCode.SurgeryCaseId, caseCptCode.CptCode)"
                                      title="@($"Delete CPT code #{caseCptCode.CptCode} from surgery case #{caseCptCode.SurgeryCaseId}")" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base"
                      Text="Close" Click="() => _dialogService.Close()" />
    </RadzenStack>
</RadzenStack>

@code {
    [Parameter]
    public SurgeryCaseViewModel ViewModel { get; set; }
    [Parameter]
    public EventCallback OnRefreshGrid { get; set; }

    private CaseCptCodeFilterModel _filterCastCptCodeModel = new();
    private CaseCptCodeAddModel _addCaseCptCodeModel = new();

    // GRID PROPERTIES
    private List<CaseCptCodeViewModel> _data = new();
    private int _totalCount = 0;
    private int _pageSize = PageSize.Default();
    private bool _isLoading = false;

    // COMPONENTS
    private RadzenDataGrid<CaseCptCodeViewModel> _gridCaseCptCodes;

    // OVERRIDE METHODS
    protected override void OnParametersSet()
    {
        _filterCastCptCodeModel.CaseId = ViewModel.Id;
        _addCaseCptCodeModel.CaseId = ViewModel.Id;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _gridCaseCptCodes.RefreshDataAsync();
        }
    }

    // SUPPORT METHODS
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;

        SetPageableProperties(args);

        await LoadGridDataAsync(_filterCastCptCodeModel);

        _isLoading = false;
    }

    private void SetPageableProperties(LoadDataArgs args)
    {
        _filterCastCptCodeModel.CountNumber = args.Top.Value;
        _filterCastCptCodeModel.StartIndex = args.Skip.Value;

        _filterCastCptCodeModel.Sidx = args.Sorts.FirstOrDefault()?.Property;
        _filterCastCptCodeModel.Sord = args.Sorts.FirstOrDefault()?.SortOrder.ToString();
    }

    private async Task LoadGridDataAsync(CaseCptCodeFilterModel filterModel)
    {
        var searchRes = await _apiService.SearchCaseCptCodesAsync(filterModel);

        if (searchRes.Success)
        {
            _data = searchRes.Data;
            _totalCount = searchRes.TotalCount;
        }
        else
        {
            _notifyService.NotifyErrors("Search CPT Codes", searchRes.Messages);

            _data = new();
            _totalCount = 0;
        }
    }

    private async Task AddCaseCptCodeAsync(CaseCptCodeAddModel caseCostAddModel)
    {
        var addCaseCptCodeRes = await _apiService.AddCaseCptCodeAsync(caseCostAddModel);

        if (!addCaseCptCodeRes.Success)
        {
            _notifyService.NotifyErrors("Add CPT Code To Surgery Case", addCaseCptCodeRes.Messages);
            return;
        }
        else
        {
            _notifyService.NotifySuccess("Add CPT Code To Surgery Case", addCaseCptCodeRes.Data);
            await _gridCaseCptCodes.RefreshDataAsync();
            await RefreshGridAsync();

            // Reset Add CPT Code Form
            _addCaseCptCodeModel = new() { CaseId = ViewModel.Id };
        }
    }

    private async Task ChangeCaseCptCodeQuantityAsync(int id, int newQuantity)
    {
        if (newQuantity <= 0)
        {
            _notifyService.NotifyError("Change Number Of CPT Code", "The Quantity must be greater than 0.");
            return;
        }

        var changeQuantityRes = await _apiService.ChangeCaseCptCodeQuantityAsync(id, newQuantity);

        if (!changeQuantityRes.Success)
        {
            _notifyService.NotifyErrors("Change Number Of CPT Code", changeQuantityRes.Messages);
            return;
        }
        else
        {
            _notifyService.NotifySuccess("Change Number Of CPT Code", changeQuantityRes.Data);
            await _gridCaseCptCodes.RefreshDataAsync();
            await RefreshGridAsync();
        }
    }

    private async Task ConfirmDeleteCaseCptCodeAsync(int id, int caseId, string cptCode)
    {
        var confirmMessage = GetDeleteCptCodeConfirmMessage(caseId, cptCode);
        var result = await _dialogService.Confirm(confirmMessage, "Delete CPT Code",
            new ConfirmOptions() { Style = "max-width: 600px;", OkButtonText = "Yes", CancelButtonText = "No" });
        if (result == null || result == false)
            return;
    }

    private RenderFragment GetDeleteCptCodeConfirmMessage(int caseId, string cptCode)
    {
        return __builder =>
        {
            <div class="rz-color-danger">
                Do you really want to <b>delete</b> CPT code '<b>@cptCode</b>' from surgery case #<b>@caseId</b>?
            </div>
        };
    }

    private async Task RefreshGridAsync()
    {
        await OnRefreshGrid.InvokeAsync();
    }
}
