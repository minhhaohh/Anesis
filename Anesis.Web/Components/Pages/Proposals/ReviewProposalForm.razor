@inject IApiService _apiService
@inject NotificationService _notifyService
@inject DialogService _dialogService

<RadzenTemplateForm TItem="ProposalReviewModel" Data="_reviewModel" Submit="ApproveProposalAsync">
    <RadzenStack>
        <ProposalInfo ViewModel="ViewModel" />

        <RadzenFieldset Text="Reviewing Options">
            <RadzenStack Gap="1rem">
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Proposed Procedure" Component="ProcedureId" class="rz-text-subtitle2" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenDropDown @bind-Value="_reviewModel.ProcedureId" Name="ProcedureId" Data="ActiveProcedures"
                                        AllowClear="true" AllowFiltering="true" ClearSearchAfterSelection="true"
                                        TextProperty="Value" ValueProperty="Key"
                                        Placeholder="---Select---" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Diagnosis Code" Component="DiagnosisCode" class="rz-text-subtitle2" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenTextBox @bind-Value="_reviewModel.DiagnosisCode" Name="DiagnosisCode" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Reviewer Notes" Component="ReviewerNotes" class="rz-text-subtitle2" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenTextArea @bind-Value="_reviewModel.ReviewerNotes" Name="ReviewerNotes" Rows="3" Style="width: 100%" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenFieldset>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary"
                          Text="Approve" Icon="check_circle" />
            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger"
                          Text="Cancel" Icon="cancel"
                          Click="async() => await CancelProposalAsync(_reviewModel)" />
            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base"
                          Text="Close" Click="() => _dialogService.Close()" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter]
    public ProposalViewModel ViewModel { get; set; }
    [Parameter]
    public Dictionary<int, string> ActiveProcedures { get; set; }

    [Parameter]
    public EventCallback OnRefreshGrid { get; set; }

    private ProposalReviewModel _reviewModel = new();

    // OVERRIDE METHODS
    protected override void OnParametersSet()
    {
        _reviewModel.Id = ViewModel.Id;
        _reviewModel.ProcedureId = ViewModel.ProcedureId;
        _reviewModel.DiagnosisCode = ViewModel.DiagnosisCode;
    }

    // SUPPORT METHODS
    public async Task ReviewProposalAsync(ProposalReviewModel reviewModel)
    {
        var reviewRes = await _apiService.ReviewProposalAsync(reviewModel);

        if (reviewRes.Success)
        {
            _notifyService.NotifySuccess("Review Proposal", reviewRes.Data);
            _dialogService.Close();
            await RefreshGridAsync();
        }
        else
        {
            _notifyService.NotifyErrors("Review Proposal", reviewRes.Messages);
        }
    }

    private async Task ApproveProposalAsync(ProposalReviewModel reviewModel)
    {
        reviewModel.IsApproved = true;
        await ReviewProposalAsync(reviewModel);
    }

    private async Task CancelProposalAsync(ProposalReviewModel reviewModel)
    {
        reviewModel.IsApproved = false;
        await ReviewProposalAsync(reviewModel);
    }

    private async Task RefreshGridAsync()
    {
        await OnRefreshGrid.InvokeAsync();
    }
}
