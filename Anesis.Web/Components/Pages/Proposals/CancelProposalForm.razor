@inject IApiService _apiService
@inject NotificationService _notifyService
@inject DialogService _dialogService

<RadzenTemplateForm TItem="ProposalSetStatusModel" Data="_setStatusModel" Submit="CancelProposalAsync">
    <RadzenStack>
        <ProposalInfo ViewModel="ViewModel" />

        <RadzenFieldset Text="Cancelling Options">
            <RadzenStack Gap="1rem">
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Reason" Component="Reason" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenTextArea @bind-Value="_setStatusModel.Reason" Name="Reason" Rows="3" Style="width: 100%" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenFieldset>

        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-color-danger">
            Do you really want to cancel proposal #@ViewModel.Id? Please enter the reason and click "Save" to confirm.
        </RadzenText>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary"
                          Text="Save" Icon="save" />
            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base"
                          Text="Close" Click="() => _dialogService.Close()" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>


@code {
    [Parameter]
    public ProposalViewModel ViewModel { get; set; }

    [Parameter]
    public EventCallback OnRefreshGrid { get; set; }

    private ProposalSetStatusModel _setStatusModel = new();

    // OVERRIDE METHODS
    protected override void OnParametersSet()
    {
        _setStatusModel.Id = ViewModel.Id;
        _setStatusModel.Status = (int)PotentialProcedureStatus.Cancelled;
    }

    // SUPPORT METHODS
    private async Task CancelProposalAsync(ProposalSetStatusModel model)
    {
        var setStatusRes = await _apiService.SetProposalStatusAsync(model);

        if (setStatusRes.Success)
        {
            _notifyService.NotifySuccess("Set Proposal Status", setStatusRes.Data);
            _dialogService.Close();
            await RefreshGridAsync();
        }
        else
        {
            _notifyService.NotifyErrors("Set Proposal Status", setStatusRes.Messages);
        }
    }

    private async Task RefreshGridAsync()
    {
        await OnRefreshGrid.InvokeAsync();
    }
}
