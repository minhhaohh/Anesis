@inject IApiService _apiService
@inject DialogService _dialogService
@inject NotificationService _notifyService

<RadzenDataGrid @ref="_grid" TItem="ProposalViewModel" IsLoading="_isLoading" Density="Density.Compact"
                Count="_totalCount" Data="_data" KeyProperty="Id" LoadData="LoadDataAsync"
                AllowSorting="true" AllowPaging="true" ShowPagingSummary="true"
                PageSizeOptions="PageSize.All()" PageSize="_pageSize"
                PagingSummaryFormat="Page {0} of {1} (total {2} records)"
                PagerHorizontalAlign="HorizontalAlign.Center" Style="@_gridStyle">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(ProposalViewModel.Id)" Title="#ID" Width="3%" CssClass="rz-text-subtitle2" />
        <RadzenDataGridColumn Property="@nameof(ProposalViewModel.EcwChartNo)" Title="Patient" Width="10%">
            <Template Context="proposal">
                <div title="Chart No"><strong>@proposal.EcwChartNo</strong> (@proposal.ChartNo)</div>
                <div class="rz-color-primary" title="Patient Name"><strong>@proposal.FirstName, @proposal.LastName</strong></div>
                <div><span title="Gender">@proposal.Gender</span> | <span title="Date of birth">@proposal.Dob.ToString("MM-dd-yyyy")</span></div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProposalViewModel.ProviderName)" Title="Original Appointment" Width="10%">
            <Template Context="proposal">
                <div class="rz-color-series-4"><strong title="Provider">@proposal.ProviderName</strong></div>
                <div><strong title="Location">@proposal.LocationName</strong> | <span title="Appointment Date">@proposal.AppointmentDate.ToString("MM-dd-yyyy")</span></div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProposalViewModel.ProcedureName)" Title="Proposed Procedure" Width="20%">
            <Template Context="proposal">
                <div title="Procedure: @proposal.ProcedureName"><strong>@proposal.ProcedureName</strong></div>
                <div title="Diagnosis Code: @proposal.DiagnosisCode">Diagnosis Code: <strong>@proposal.DiagnosisCode</strong></div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProposalViewModel.ProposerName)" Title="Requested By" Width="10%">
            <Template Context="proposal">
                <div class="rz-color-series-4"><strong title="Requested By">@proposal.ProposerName</strong></div>
                <div title="Requested Date">@proposal.CreatedDate.ToString("MM-dd-yyyy")</div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProposalViewModel.ReviewerName)" Title="Review By" Width="12%">
            <Template Context="proposal">
                @{
                    var colorClass = ProposalReviewStatusColors.GetColorClass(proposal.ReviewStatus);
                }

                @if (proposal.ReviewerId > 0)
                {
                    <div><strong title="Reviewer" class="rz-color-series-4">@proposal.ReviewerName</strong></div>

                    @if (proposal.ReviewerNotes.HasValue())
                    {
                        <div title="Reviewer Notes: @proposal.ReviewerNotes">Notes: @proposal.ReviewerNotes</div>
                    }

                    <div class="@colorClass"><strong>@proposal.ReviewStatus</strong></div>
                }
                @if (proposal.RequestStatus == (int)PotentialProcedureStatus.Pending && proposal.ReviewerId > 0)
                {
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Icon="rate_review"
                                  Click="async () => await OpenReviewProposalDialogAsync(proposal)"
                                  title="@($"Review proposal #{proposal.Id}")" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProposalViewModel.SurgeonName)" Title="Surgery By" Width="12%">
            <Template Context="proposal">
                @if (proposal.SurgeonId > 0)
                {
                    <div>
                        <strong title="Surgeon" class="rz-color-series-4">@proposal.SurgeonName</strong>
                    </div>
                    <div>
                        <strong title="Surgery Location">@proposal.SurgeryLocationName</strong>
                        <span> | </span>
                        <span title="Surgery Time">@proposal.SurgeryDate?.ToString("MM-dd-yyyy") @proposal.SurgeryTime.ToTimeString(true)</span>
                    </div>
                }
                @if (proposal.RequestStatus == (int)PotentialProcedureStatus.Reviewed)
                {
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Icon="task"
                                  Click="async () => await ConfirmAndSetOrderedStatusAsync(proposal)"
                                  title="@($"Mark proposal #{proposal.Id} as ordered")" />
                }
                else if (proposal.RequestStatus == (int)PotentialProcedureStatus.Ordered
                || proposal.RequestStatus == (int)PotentialProcedureStatus.Scheduled)
                {
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Icon="calendar_month"
                                  Click="async() => await OpenScheduleSurgeryDialogAsync(proposal)"
                                  title="@($"Schedule surgery for proposal #{proposal.Id}")" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProposalViewModel.RequestStatus)" Title="Status" Width="7%">
            <Template Context="proposal">
                @{
                    var colorClass = ProposalStatusColors.GetColorClass(proposal.RequestStatusStr);
                    var canToggleFlag = CanEditProposal
                    && (proposal.RequestStatus == (int)PotentialProcedureStatus.Pending
                    || proposal.RequestStatus == (int)PotentialProcedureStatus.Reviewed);
                }
                <div class="@colorClass"><strong>@proposal.RequestStatusStr</strong></div>
                @if (proposal.ChartNotePosted)
                {
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.ExtraSmall"
                                  Text="Posted" Icon="check" Disabled="!canToggleFlag"
                                  Click="async() => await ToggleFlagAsync(proposal.Id, nameof(proposal.ChartNotePosted))"
                                  title="The Patient's Chart Note is posted" />
                }
                else
                {
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall"
                                  Text="Unposted" Icon="close" Disabled="!canToggleFlag"
                                  Click="async() => await ToggleFlagAsync(proposal.Id, nameof(proposal.ChartNotePosted))"
                                  title="The Patient's Chart Note is unposted" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProposalViewModel.Id)" Width="10%" Sortable="false">
            <Template Context="proposal">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.2rem">
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Icon="manage_history"
                                  Click="async() => await OpenInvoiceChangeLogsDialogAsync(proposal.Id)"
                                  title="@($"View change logs of proposal #{proposal.Id}")" />
                    @if (CanEditProposal
                    && (proposal.RequestStatus == (int)PotentialProcedureStatus.Pending
                    || proposal.RequestStatus == (int)PotentialProcedureStatus.Reviewed))
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Icon="edit"
                                      Click="async () => await OpenEditProposalDialogAsync(proposal.Id)"
                                      title="@($"Edit proposal #{proposal.Id}")" />
                    }
                    @if (proposal.RequestStatus == (int)PotentialProcedureStatus.Scheduled)
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Icon="check_circle"
                                      Click="async () => await ConfirmAndSetCompletedStatusAsync(proposal)"
                                      title="@($"Mark proposal #{proposal.Id} as completed")" />
                    }
                    @if (proposal.RequestStatus != (int)PotentialProcedureStatus.Completed
                    && proposal.RequestStatus != (int)PotentialProcedureStatus.Cancelled)
                    {

                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Icon="cancel"
                                      Click="async () => await OpenCancelProposalDialog(proposal)"
                                      title="@($"Cancel proposal #{proposal.Id}")" />
                    }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public bool CanEditProposal { get; set; }
    [Parameter]
    public ProposalFilterModel FilterModel { get; set; }
    [Parameter]
    public GeneralSettingsModel GeneralSettings { get; set; }
    [Parameter]
    public Dictionary<int, string> ActiveAscLocations { get; set; }
    [Parameter]
    public Dictionary<int, string> ActiveDoctors { get; set; }
    [Parameter]
    public Dictionary<int, string> ActiveProcedures { get; set; }

    [Parameter]
    public EventCallback<int> OnOpenEditProposalDialog { get; set; }

    // GRID PROPERTIES
    private List<ProposalViewModel> _data = new();
    private int _totalCount = 0;
    private int _pageSize = PageSize.Default();
    private bool _isLoading = false;
    private string _gridStyle = "max-height: 500px;";

    // COMPONENTS
    private RadzenDataGrid<ProposalViewModel> _grid;

    // OVERRIDE METHODS
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshGridAsync();
        }
    }

    // PUBLIC METHODS
    public void ResizeGrid(bool collapsedFilterPanel)
    {
        _gridStyle = collapsedFilterPanel ? "max-height: 686px;" : "max-height: 500px;";
    }

    public async Task RefreshGridAsync()
    {
        await _grid.RefreshDataAsync();
    }

    public async Task FilterGridAsync(ProposalFilterModel filterModel)
    {
        FilterModel = filterModel;
        await RefreshGridAsync();
    }

    // SUPPORT METHODS
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;

        SetPageableProperties(args);

        await LoadGridDataAsync(FilterModel);

        _isLoading = false;
    }

    private void SetPageableProperties(LoadDataArgs args)
    {
        FilterModel.CountNumber = args.Top.Value;
        FilterModel.StartIndex = args.Skip.Value;

        FilterModel.Sidx = args.Sorts.FirstOrDefault()?.Property;
        FilterModel.Sord = args.Sorts.FirstOrDefault()?.SortOrder.ToString();
    }

    private async Task LoadGridDataAsync(ProposalFilterModel filterModel)
    {
        var searchRes = await _apiService.SearchProposalsAsync(filterModel);

        if (searchRes.Success)
        {
            _data = searchRes.Data;
            _totalCount = searchRes.TotalCount;
        }
        else
        {
            _notifyService.NotifyErrors("Search Proposals", searchRes.Messages);

            _data = new();
            _totalCount = 0;
        }
    }

    private async Task ToggleFlagAsync(int id, string fieldName)
    {
        var toggleModel = new FlagToggleModel()
            {
                Id = id,
                FieldName = fieldName,
            };
        var toggleFlagRes = await _apiService.ToggleProposalFlagAsync(toggleModel);

        if (toggleFlagRes.Success)
        {
            _notifyService.NotifySuccess("Update Proposal Information", toggleFlagRes.Data);
            await RefreshGridAsync();
        }
        else
        {
            _notifyService.NotifyErrors($"Update Proposal Information", toggleFlagRes.Messages);
        }
    }

    private async Task OpenEditProposalDialogAsync(int id)
    {
        await OnOpenEditProposalDialog.InvokeAsync(id);
    }

    private async Task OpenReviewProposalDialogAsync(ProposalViewModel proposal)
    {
        var title = $"Review Proposal #{proposal.Id}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "ViewModel", proposal },
                { "ActiveProcedures", ActiveProcedures },
                { "OnRefreshGrid", EventCallback.Factory.Create(this, RefreshGridAsync) },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.Default,
            };

        await _dialogService.OpenAsync<ReviewProposalForm>(title, paramsDic, options);
    }

    private async Task OpenScheduleSurgeryDialogAsync(ProposalViewModel proposal)
    {
        var businessStartTime = TimeSpan.Parse(GeneralSettings.BusinessStartTime);
        var businessEndTime = TimeSpan.Parse(GeneralSettings.BusinessEndTime);
        var title = $"Schedule Surgery For Proposal #{proposal.Id}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "ViewModel", proposal },
                { "BusinessStartTime", businessStartTime },
                { "BusinessEndTime", businessEndTime },
                { "ActiveAscLocations", ActiveAscLocations },
                { "ActiveDoctors", ActiveDoctors },
                { "OnRefreshGrid", EventCallback.Factory.Create(this, RefreshGridAsync) },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.Default,
            };

        await _dialogService.OpenAsync<ScheduleSurgeryForm>(title, paramsDic, options);
    }

    private async Task OpenCancelProposalDialog(ProposalViewModel proposal)
    {
        var title = $"Cancel Proposal #{proposal.Id}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "ViewModel", proposal },
                { "OnRefreshGrid", EventCallback.Factory.Create(this, RefreshGridAsync) },
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.Default,
            };

        await _dialogService.OpenAsync<CancelProposalForm>(title, paramsDic, options);
    }

    private async Task OpenInvoiceChangeLogsDialogAsync(int id)
    {
        var changeLogs = await GetProposalChangeLogsAsync(id);

        if (changeLogs == null)
        {
            return;
        }

        var title = $"Change Logs Of Proposal #{id}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "ChangeLogs", changeLogs },
                { "NoChangeMessage", "There is no change with this proposal."}
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.ExtraLarge,
            };

        await _dialogService.OpenAsync<ChangeLogHistory>(title, paramsDic, options);
    }

    private async Task ConfirmAndSetOrderedStatusAsync(ProposalViewModel proposal)
    {
        var confirmMessage = GetSetStatusConfirmMessage(proposal, PotentialProcedureStatus.Completed);
        var result = await _dialogService.Confirm(confirmMessage, $"Set Status Of Proposal #{proposal.Id}",
            new ConfirmOptions() { Style = "max-width: 600px;", OkButtonText = "Yes", CancelButtonText = "No" });

        if (result == null || result == false)
        {
            return;
        }

        await SetProposalStatusAsync(proposal.Id, (int)PotentialProcedureStatus.Ordered);
    }

    private async Task ConfirmAndSetCompletedStatusAsync(ProposalViewModel proposal)
    {
        var confirmMessage = GetSetStatusConfirmMessage(proposal, PotentialProcedureStatus.Completed);
        var result = await _dialogService.Confirm(confirmMessage, $"Set Status Of Proposal #{proposal.Id}",
            new ConfirmOptions() { Style = "max-width: 600px;", OkButtonText = "Yes", CancelButtonText = "No" });

        if (result == null || result == false)
        {
            return;
        }

        await SetProposalStatusAsync(proposal.Id, (int)PotentialProcedureStatus.Completed);
    }

    private RenderFragment GetSetStatusConfirmMessage(ProposalViewModel proposal, PotentialProcedureStatus status)
    {
        var statusColor = ProposalStatusColors.GetColorClass(status.ToString());

        return __builder =>
        {
            <RadzenStack>
                <ProposalInfo ViewModel="proposal" />

                <RadzenText TextStyle="TextStyle.Body2" class="@statusColor">
                    Do you really want to mark proposal #<b>@proposal.Id</b> as <b>@status.ToString()</b>?
                </RadzenText>
            </RadzenStack>
        };
    }

    private async Task<ProposalViewModel> GetProposalByIdAsync(int id)
    {
        var proposalRes = await _apiService.GetProposalByIdAsync(id);

        if (!proposalRes.Success)
        {
            _notifyService.NotifyErrors("Get Proposal Information", proposalRes.Messages);
            return null;
        }

        return proposalRes.Data;
    }

    private async Task<List<ChangeLogViewModel>> GetProposalChangeLogsAsync(int id)
    {
        var changeLogsRes = await _apiService.GetProposalChangeLogsAsync(id);

        if (!changeLogsRes.Success)
        {
            _notifyService.NotifyErrors("Get Proposal Change Logs", changeLogsRes.Messages);
            return null;
        }

        return changeLogsRes.Data;
    }

    private async Task SetProposalStatusAsync(int id, int status)
    {
        var setStatusModel = new ProposalSetStatusModel()
            {
                Id = id,
                Status = status
            };
        var setStatusRes = await _apiService.SetProposalStatusAsync(setStatusModel);

        if (!setStatusRes.Success)
        {
            _notifyService.NotifyErrors("Set Proposal Status", setStatusRes.Messages);
        }
        else
        {
            _notifyService.NotifySuccess("Set Proposal Status", setStatusRes.Data);

            await RefreshGridAsync();
        }
    }
}
