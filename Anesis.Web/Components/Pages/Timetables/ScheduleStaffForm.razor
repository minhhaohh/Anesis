@inject IApiService _apiService
@inject NotificationService _notifyService
@inject DialogService _dialogService

<RadzenTemplateForm TItem="StaffScheduleEditModel" Data="EditModel" Submit="ScheduleEventsForStaffAsync">
    <RadzenStack>
        <RadzenFieldset Text="Schedule Information">
            <RadzenStack Gap="0.5rem">
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Location" Component="LocationId" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenDropDown @bind-Value="EditModel.LocationId" Name="LocationId"
                                        Data="@ActiveLocations" AllowClear="true"
                                        TextProperty="Value" ValueProperty="Key"
                                        Placeholder="---Select---" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Employee(s)" Component="EmployeeIds" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenDropDown @bind-Value="EditModel.EmployeeIds" Name="EmployeeIds"
                                        Data="@ActiveEmployees" AllowClear="true" AllowFiltering="true"
                                        Multiple="true" Chips="true" MaxSelectedLabels="10"
                                        TextProperty="Value" ValueProperty="Key"
                                        Placeholder="---Select---" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="From Date" Component="FromDate" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenDatePicker @bind-Value="EditModel.FromDate" Name="FromDate"
                                          AllowClear="true" AllowInput="false"
                                          DateFormat="MM/dd/yyyy" Placeholder="MM/dd/yyyy" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="To Date" Component="ToDate" class="rz-text-subtitle2" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenDatePicker @bind-Value="EditModel.ToDate" Name="ToDate"
                                          AllowClear="true" AllowInput="false"
                                          DateFormat="MM/dd/yyyy" Placeholder="MM/dd/yyyy" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Recur On" Component="ToDate" class="rz-text-subtitle2" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        @foreach (var item in typeof(DayOfWeek).ToDictionary())
                        {
                            var checkBoxValue = EditModel.DaysOfWeek.Any(x => x == item.Key);

                            <RadzenCheckBox @bind-Value="checkBoxValue" TValue="bool" Name="@item.Value"
                                            Change="(isChecked) => { if (isChecked) { EditModel.DaysOfWeek.Add(item.Key); } else { EditModel.DaysOfWeek.Remove(item.Key); } }" />
                            <RadzenLabel Text="@item.Value" Component="@item.Value" class="rz-mr-2" />
                        }
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Start Time" Component="StartTime" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenTimeSpanPicker @bind-Value="EditModel.StartTime" Name="StartTime"
                                              Min="BusinessStartTime" Max="BusinessEndTime"
                                              AllowClear="true" ShowConfirmationButton="true" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="End Time" Component="EndTime" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenTimeSpanPicker @bind-Value="EditModel.EndTime" Name="EndTime"
                                              Min="BusinessStartTime" Max="BusinessEndTime"
                                              AllowClear="true" ShowConfirmationButton="true" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Save Option" Component="SaveOption" class="rz-text-subtitle2 required-near" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenRadioButtonList @bind-Value="EditModel.SaveOption" TValue="string" Orientation="Orientation.Vertical">
                            <Items>
                                @foreach (var item in StaffScheduleSaveOptions)
                                {
                                    <RadzenRadioButtonListItem Text="@item" Value="@item" />
                                }
                            </Items>
                        </RadzenRadioButtonList>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenLabel Text="Notes" Component="Notes" class="rz-text-subtitle2" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenTextArea @bind-Value="EditModel.Notes" Name="Notes" Rows="3" Style="width: 100%" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenFieldset>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary"
                          Text="Save" Icon="save" />
            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base"
                          Text="Close" Click="() => _dialogService.Close()" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter]
    public StaffScheduleEditModel EditModel { get; set; }
    [Parameter]
    public TimeSpan BusinessStartTime { get; set; }
    [Parameter]
    public TimeSpan BusinessEndTime { get; set; }
    [Parameter]
    public Dictionary<int, string> ActiveLocations { get; set; }
    [Parameter]
    public Dictionary<int, string> ActiveEmployees { get; set; }
    [Parameter]
    public List<string> StaffScheduleSaveOptions { get; set; }

    [Parameter]
    public EventCallback OnRefreshTimelineLocEvents { get; set; }
    [Parameter]
    public EventCallback OnRefreshTimelineEmpEvents { get; set; }

    // SUPPORT METHODS
    private async Task ScheduleEventsForStaffAsync(StaffScheduleEditModel model)
    {
        if (model.Id > 0)
        {
            if (await UpdateStaffSchedulesAsync(model))
            {
                _dialogService.Close();

                await RefreshTimelineLocEventsAsync();
                await RefreshTimelineEmpEventsAsync();
            }
        }
        else
        {
            if (await CreateStaffSchedulesAsync(model))
            {
                _dialogService.Close();

                await RefreshTimelineLocEventsAsync();
                await RefreshTimelineEmpEventsAsync();
            }
        }
    }

    private async Task<bool> CreateStaffSchedulesAsync(StaffScheduleEditModel model)
    {
        var scheduleStaffRes = await _apiService.CreateStaffSchedulesAsync(model);

        if (scheduleStaffRes.Success)
        {
            _notifyService.NotifySuccess("Create Staff Schedules", scheduleStaffRes.Data);
            _dialogService.Close();
        }
        else
        {
            _notifyService.NotifyErrors("Create Staff Schedules", scheduleStaffRes.Messages);
        }

        return scheduleStaffRes.Success;
    }

    private async Task<bool> UpdateStaffSchedulesAsync(StaffScheduleEditModel model)
    {
        var scheduleStaffRes = await _apiService.UpdateStaffSchedulesAsync(model);

        if (scheduleStaffRes.Success)
        {
            _notifyService.NotifySuccess("Update Staff Schedules", scheduleStaffRes.Data);
            _dialogService.Close();
        }
        else
        {
            _notifyService.NotifyErrors("Update Staff Schedules", scheduleStaffRes.Messages);
        }

        return scheduleStaffRes.Success;
    }

    private async Task RefreshTimelineLocEventsAsync()
    {
        await OnRefreshTimelineLocEvents.InvokeAsync();
    }

    private async Task RefreshTimelineEmpEventsAsync()
    {
        await OnRefreshTimelineEmpEvents.InvokeAsync();
    }
}
