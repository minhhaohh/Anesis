@inject IApiService _apiService
@inject DialogService _dialogService
@inject NotificationService _notifyService

<RadzenStack>
    <RadzenText TextStyle="TextStyle.Body2" class="rz-color-danger">@_warningMessage</RadzenText>

    <RadzenTemplateForm TItem="SurgeryCaseFilterModel" Data="_filterModel" Submit="FilterGridAsync">
        <RadzenFieldset Text="Filter Panel" AllowCollapse="true"
                        Collapse="() => ToggleFilterPanel(true)"
                        Expand="() => ToggleFilterPanel(false)">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="2">
                    <RadzenStack Gap="0.5rem">
                        <RadzenLabel Text="Surgery Date" Component="SurgeryDate" class="rz-text-subtitle2" />
                        <RadzenDatePicker @bind-Value="_filterModel.SurgeryDate" Name="SurgeryDate"
                                          AllowClear="true" AllowInput="false"
                                          DateFormat="MM/dd/yyyy" Placeholder="MM/dd/yyyy" Style="width: 100%;" />

                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="2">
                    <RadzenStack Gap="0.5rem">
                        <RadzenLabel Text="Location" Component="LocationId" class="rz-text-subtitle2" />
                        <RadzenDropDown @bind-Value="_filterModel.LocationId" Name="LocationId"
                                        Data="ActiveAscLocations" AllowClear="true"
                                        TextProperty="Value" ValueProperty="Key"
                                        Placeholder="---All---" Style="width: 100%;" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="2">
                    <RadzenStack Gap="0.5rem">
                        <RadzenLabel Text="Vendor Name" Component="VendorName" class="rz-text-subtitle2" />
                        <RadzenTextBox @bind-Value="_filterModel.VendorName" Name="VendorName"
                                       PlaceHolder="Vendor Name" Style="width: 100%;" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="2">
                    <RadzenStack Gap="0.5rem" Style="height: 100%;">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="height: 100%;">
                            <RadzenCheckBox @bind-Value="_filterModel.HasDevices" TValue="bool" Name="HasDevices"
                                            Change="(isChecked) => { if (isChecked) { _filterModel.NoDevices = false; } }" />
                            <RadzenLabel Text="Has Devices" Component="HasDevices" class="rz-text-subtitle2" />
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="height: 100%;">
                            <RadzenCheckBox @bind-Value="_filterModel.NoDevices" TValue="bool" Name="NoDevices"
                                            Change="(isChecked) => { if (isChecked) { _filterModel.HasDevices = false; } }" />
                            <RadzenLabel Text="No Devices" Component="NoDevices" class="rz-text-subtitle2" />
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="2">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="height: 100%;">
                        <RadzenSwitch @bind-Value="_filterModel.SelectedOnly" Name="SelectedOnly" />
                        <RadzenLabel Text="Selected Only" Component="SelectedOnly" class="rz-text-subtitle2 rz-color-danger" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="2">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.End" Gap="0.5rem" Style="height: 100%;">
                        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary"
                                      Icon="filter_alt" title="Filter surgery cases" />
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Warning"
                                      Icon="ink_eraser" Click="ClearFilterAsync" title="Clear filter fields" />
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>
    </RadzenTemplateForm>

    <RadzenDataGrid @ref="_grid" TItem="SurgeryCaseViewModel" IsLoading="_isLoading"
                    Count="_data.TotalCount" Data="_data.Data" KeyProperty="Id" LoadData="LoadDataAsync"
                    AllowSorting="true" AllowPaging="true" ShowPagingSummary="true"
                    PageSizeOptions="PageSize.GetAll()" PageSize="_pageSize"
                    PagingSummaryFormat="Page {0} of {1} (total {2} records)"
                    PagerHorizontalAlign="HorizontalAlign.Center" Style="@_gridStyle">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.Id)" Title="#ID" Width="5%" CssClass="rz-text-subtitle2" />
            <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.EcwChartNo)" Title="Patient" Width="15%">
                <Template Context="surgeryCase">
                    <div title="Chart No">
                        <strong>@surgeryCase.EcwChartNo</strong>
                        <span> | </span>
                        <strong class="rz-color-primary" title="Patient Name">@surgeryCase.FirstName, @surgeryCase.LastName</strong>
                    </div>
                    <div>
                        <span title="Gender">@surgeryCase.Gender</span>
                        <span> | </span>
                        <span title="Date of birth">@surgeryCase.Dob.ToString("MM-dd-yyyy")</span>
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.ProcedureName)" Title="Procedure" Width="20%">
                <Template Context="surgeryCase">
                    @{
                        var colorClass = SurgeryCaseStatusColors.GetColorClass(surgeryCase.CaseStatusStr);
                    }
                    <div><strong title="Procedure">@surgeryCase.ProcedureName</strong></div>
                    <div><span title="Surgery Date">@surgeryCase.SurgeryDate.ToString("MM-dd-yyyy")</span> | <strong class="@colorClass" title="Status">@surgeryCase.CaseStatusStr</strong></div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.PrimaryProviderName)" Title="Surgery By" Width="15%">
                <Template Context="surgeryCase">
                    <div class="rz-color-series-4"><strong title="Surgeon">@surgeryCase.PrimaryProviderName</strong></div>
                    <div><strong title="Location">@surgeryCase.LocationName</strong></div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.Devices)" Title="Devices" Width="20%" Sortable="false">
                <Template Context="surgeryCase">
                    <div>
                        <ul>
                            @foreach (var device in surgeryCase.Devices)
                            {
                                <li>@device</li>
                            }
                        </ul>
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.InvoiceAmount)" Title="Invoice Amount" Width="15%" Sortable="false">
                <Template Context="surgeryCase">
                    <RadzenFormField Style="width: 100%;" class="custom-input-group">
                        <Start>
                            <RadzenIcon Icon="attach_money" />
                        </Start>
                        <ChildContent>
                            <RadzenNumeric @bind-Value="surgeryCase.InvoiceAmount" Name="InvoiceAmount" Style="width: 100%;"
                                           Disabled="LinkedCases.Any(x => x.SurgeryCaseId == surgeryCase.Id)" />
                        </ChildContent>
                    </RadzenFormField>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(SurgeryCaseViewModel.Id)" Width="10%" Sortable="false">
                <Template Context="surgeryCase">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.2rem">
                        @if (LinkedCases.Any(x => x.SurgeryCaseId == surgeryCase.Id))
                        {
                            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                          Text="Remove" Icon="delete"
                                          Click="() => RemoveSurgeryCase(surgeryCase.Id)"
                                          title="@($"Remove surgery case #{surgeryCase.Id} from current invoice")" />
                        }
                        else
                        {
                            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"
                                          Text="Select" Icon="link"
                                          Click="() => SelectSurgeryCase(surgeryCase.Id, surgeryCase.InvoiceAmount)"
                                          title="@($"Select surgery case #{surgeryCase.Id} for current invoice")" />
                        }
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base"
                      Text="Close" Click="() => _dialogService.Close()" />
    </RadzenStack>
</RadzenStack>

@code {
    [Parameter]
    public int InvoiceId { get; set; }
    [Parameter]
    public bool IsBulk { get; set; }
    [Parameter]
    public List<InvoiceLinkSurgeryCaseModel> LinkedCases { get; set; }
    [Parameter]
    public Dictionary<int, string> ActiveAscLocations { get; set; }

    [Parameter]
    public EventCallback<InvoiceLinkSurgeryCaseModel> OnSelectSurgeryCase { get; set; }
    [Parameter]
    public EventCallback<int> OnRemoveSurgeryCase { get; set; }

    private string _warningMessage = "";
    private bool _collapsedFilterPanel = false;
    private string _gridStyle = "max-height: 580px;";
    private int _pageSize = PageSize.Default();
    private bool _isLoading = false;
    private SurgeryCaseFilterModel _filterModel = new();
    private ResponseModel<List<SurgeryCaseViewModel>> _data = new();

    // COMPONENTS
    private RadzenDataGrid<SurgeryCaseViewModel> _grid;

    // OVERRIDE METHODS
    protected override void OnParametersSet()
    {
        _filterModel.NotLinkInvoice = true;
        _filterModel.PurchaseInvoiceId = InvoiceId;
        _filterModel.SelectedCaseIds = LinkedCases.Select(x => x.SurgeryCaseId).StrJoin(",");

        if (IsBulk)
        {
            _warningMessage = "This is a bulk order invoice, you can link it to multiple surgery cases, but you have to enter amount for each case before selecting.";
        }
        else
        {
            _warningMessage = "You can only link this invoice to 1 surgery case. And you do not have to enter an amount for surgery case, "
                + "the system will automatically get the total invoice amount used for the surgery case.";
        }
    }

    // SUPPORT METHODS
    private void ToggleFilterPanel(bool collapsed)
    {
        _collapsedFilterPanel = collapsed;
        ResizeGrid(_collapsedFilterPanel);
    }

    public void ResizeGrid(bool collapsedFilterPanel)
    {
        _collapsedFilterPanel = collapsedFilterPanel;
        _gridStyle = _collapsedFilterPanel ? "max-height: 680px;" : "max-height: 580px;";
    }

    public async Task RefreshGridAsync()
    {
        await _grid.RefreshDataAsync();
    }

    public async Task FilterGridAsync(SurgeryCaseFilterModel filterModel)
    {
        _filterModel = filterModel;
        await RefreshGridAsync();
    }

    private async Task ClearFilterAsync()
    {
        var model = new SurgeryCaseFilterModel()
            {
                NotLinkInvoice = true,
                PurchaseInvoiceId = InvoiceId,
                SelectedCaseIds = LinkedCases.Select(x => x.SurgeryCaseId).StrJoin(","),
            };
        await FilterGridAsync(model);
    }

    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;

        _filterModel.CountNumber = args.Top.Value;
        _filterModel.StartIndex = args.Skip.Value;

        _filterModel.Sidx = args.Sorts.FirstOrDefault()?.Property;
        _filterModel.Sord = args.Sorts.FirstOrDefault()?.SortOrder.ToString();

        _data = await _apiService.SearchSurgeryCasesAsync(_filterModel);

        _isLoading = false;
    }

    private void SelectSurgeryCase(int surgeryCaseId, decimal invoiceAmount)
    {
        var selectedCase = new InvoiceLinkSurgeryCaseModel
            {
                SurgeryCaseId = surgeryCaseId,
                InvoiceAmount = invoiceAmount
            };

        OnSelectSurgeryCase.InvokeAsync(selectedCase);

        _filterModel.SelectedCaseIds = LinkedCases.Select(x => x.SurgeryCaseId).StrJoin(",");
    }

    private void RemoveSurgeryCase(int surgeryCaseId)
    {
        var caseToRemove = LinkedCases.FirstOrDefault(x => x.SurgeryCaseId == surgeryCaseId);

        OnRemoveSurgeryCase.InvokeAsync(surgeryCaseId);

        _filterModel.SelectedCaseIds = LinkedCases.Select(x => x.SurgeryCaseId).StrJoin(",");
    }
}
