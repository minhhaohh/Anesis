@inject IApiService _apiService
@inject DialogService _dialogService
@inject NotificationService _notifyService

<RadzenDataGrid @ref="_grid" TItem="InvoiceViewModel" IsLoading="_isLoading"
                Count="_data.TotalCount" Data="_data.Data" KeyProperty="Id" LoadData="LoadDataAsync"
                AllowSorting="true" AllowPaging="true" ShowPagingSummary="true"
                PageSizeOptions="PageSize.GetAll()" PageSize="_pageSize"
                PagingSummaryFormat="Page {0} of {1} (total {2} records)"
                PagerHorizontalAlign="HorizontalAlign.Center" Style="@_gridStyle">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(InvoiceViewModel.Id)" Title="#ID" Width="5%" CssClass="rz-text-subtitle2" />
        <RadzenDataGridColumn Property="@nameof(InvoiceViewModel.InvoiceNo)" Title="Invoice No/Date" Width="10%">
            <Template Context="invoice">
                <div title="Invoice Number">
                    <span>#</span>
                    @if (invoice.CanEdit)
                    {
                        <strong title="@($"Update Invoice #{invoice.InvoiceNo}")">
                            <a href="javascript:;" class="rz-color-primary text-underline-none"
                               onclick="@(async () => await OpenEditInvoiceDialogAsync(invoice.Id))">
                                @invoice.InvoiceNo
                            </a>
                        </strong>
                    }
                    else if (invoice.CanEditBasicInfo)
                    {
                        <strong title="@($"Update Invoice #{invoice.InvoiceNo}")">
                            <a href="javascript:;" class="rz-color-series-4 text-underline-none"
                               onclick="@(async () => await OpenEditBasicInvoiceDialogAsync(invoice.Id))">
                                @invoice.InvoiceNo
                            </a>
                        </strong>
                    }
                    else
                    {
                        <strong>@invoice.InvoiceNo</strong>
                    }
                </div>
                <div title="Invoice Date">@invoice.InvoiceDate.ToString("MM-dd-yyyy")</div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(InvoiceViewModel.ScannedFileName)" Title="#Items & File" Width="15%">
            <Template Context="invoice">
                <div title="Number Of Items">
                    <strong>@invoice.ItemsCount</strong> items
                    @if (invoice.IsBulk)
                    {
                        <span> - </span>
                        <strong class="rz-color-danger">Bulk Invoice</strong>
                    }
                </div>
                <div title="@($"View Invoice File: {@invoice.ScannedFileShortName}")">
                    <a href="@invoice.ScannedFileName" target="_blank" class="rz-color-primary text-underline-none">@invoice.ScannedFileShortName</a>
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(InvoiceViewModel.VendorName)" Title="Vendor" Width="15%">
            <Template Context="invoice">
                <div title="Vendor Name"><strong>@invoice.VendorName</strong></div>
                <div title="Vendor Description">@invoice.VendorDescription</div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(InvoiceViewModel.LocationName)" Title="Location" Width="8%">
            <Template Context="invoice">
                <div title="Company">@invoice.Company</div>
                <div title="Location">@invoice.LocationName</div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(InvoiceViewModel.TotalAmount)" Title="Amount" Width="12%">
            <Template Context="invoice">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween"
                             Style="width:100%;" title="Total Amount">
                    <span>Total:</span>
                    <strong class="rz-color-series-4">@invoice.TotalAmount.ToString("C2")</strong>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween"
                             Style="width: 100%;" title="Amount To Pay">
                    <span>Must Pay:</span>
                    <strong class="rz-color-primary">@invoice.AmountToPay.ToString("C2")</strong>
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(InvoiceViewModel.DueDate)" Title="Due Date" Width="8%">
            <Template Context="invoice">
                @{
                    var colorClass = InvoiceStatusColors.GetColorClass(invoice.InvoiceStatusStr);
                }
                <div title="Due Date">@invoice.DueDate.ToString("MM-dd-yyyy")</div>
                <div title="Status"><strong class="@colorClass">@invoice.InvoiceStatusStr</strong></div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(InvoiceViewModel.PaymentDate)" Title="Payment Date" Width="12%">
            <Template Context="invoice">
                <div title="Payment Date">@invoice.PaymentDate?.ToString("MM-dd-yyyy")</div>
                <div>
                    <strong title="Payment Method">@invoice.PaymentMethodName</strong>
                    <span> - </span>
                    <strong class="rz-color-success" title="Payment Amount">@invoice.AmountPaid?.ToString("C2")</strong>
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(InvoiceViewModel.UpdatedDate)" Title="Last Change" Width="10%">
            <Template Context="invoice">
                <div title="Updated Date">@invoice.UpdatedDate.ToString("MM-dd-yyyy HH:mm")</div>
                <div title="Updated By"><strong><i class="rz-color-series-4">@invoice.UpdatedBy</i></strong></div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(InvoiceViewModel.NextStep)" Title="Next Step" Width="10%" Sortable="false">
            <Template Context="invoice">
                <div title="Next Action">
                    @if (invoice.NextStep.HasValue())
                    {
                        <i>@invoice.NextStep</i>
                    }
                    else
                    {
                        <strong>DONE</strong>
                    }
                </div>
                @if (invoice.NextActionBy.HasValue())
                {
                    <div title="Who Does This Action?">
                        <RadzenIcon Icon="arrow_right_alt" IconColor="@Colors.Series4" />
                        <strong class="rz-color-series-4">@invoice.NextActionBy</strong>
                    </div>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(InvoiceViewModel.Id)" Width="10%" Sortable="false">
            <Template Context="invoice">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.2rem">
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Icon="manage_history"
                                  Click="async() => await OpenInvoiceChangeLogsDialogAsync(invoice.Id)"
                                  title="@($"View change logs of invoice #{invoice.Id}")" />
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Icon="chat_info"
                                  Click="async() => await OpenInvoiceDetailsDialogAsync(invoice.Id)"
                                  title="@($"View invoice details #{invoice.Id}")" />
                    @if (invoice.CanDelete)
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Icon="delete"
                                      title="@($"Delete invoice #{invoice.Id}")" />
                    }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public InvoiceFilterModel FilterModel { get; set; }
    [Parameter]
    public bool CollapsedFilterPanel { get; set; }

    [Parameter]
    public EventCallback<int> OnOpenEditInvoiceDialog { get; set; }
    [Parameter]
    public EventCallback<int> OnOpenEditBasicInvoiceDialog { get; set; }

    private string _gridStyle = "max-height: 472px;";
    private int _pageSize = PageSize.Default();
    private bool _isLoading = false;
    private ResponseModel<List<InvoiceViewModel>> _data = new();

    // COMPONENTS
    private RadzenDataGrid<InvoiceViewModel> _grid;

    // PUBLIC METHODS
    public void ResizeGrid(bool collapsedFilterPanel)
    {
        CollapsedFilterPanel = collapsedFilterPanel;
        _gridStyle = CollapsedFilterPanel ? "max-height: 700px;" : "max-height: 472px;";
    }

    public async Task RefreshGridAsync()
    {
        await _grid.RefreshDataAsync();
    }

    public async Task FilterGridAsync(InvoiceFilterModel filterModel)
    {
        FilterModel = filterModel;
        await RefreshGridAsync();
    }

    // SUPPORT METHODS
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;

        FilterModel.CountNumber = args.Top.Value;
        FilterModel.StartIndex = args.Skip.Value;

        FilterModel.Sidx = args.Sorts.FirstOrDefault()?.Property;
        FilterModel.Sord = args.Sorts.FirstOrDefault()?.SortOrder.ToString();

        _data = await _apiService.SearchInvoicesAsync(FilterModel);

        _isLoading = false;
    }

    private async Task OpenEditInvoiceDialogAsync(int id)
    {
        await OnOpenEditInvoiceDialog.InvokeAsync(id);
    }

    private async Task OpenEditBasicInvoiceDialogAsync(int id)
    {
        await OnOpenEditBasicInvoiceDialog.InvokeAsync(id);
    }

    private async Task OpenInvoiceChangeLogsDialogAsync(int id)
    {
        var changeLogs = await GetInvoiceChangeLogsAsync(id);

        if (changeLogs == null)
        {
            return;
        }

        var title = $"Change Logs Of Invoice #{id}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "ChangeLogs", changeLogs },
                { "NoChangeMessage", "There is no change with this invoice."}
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.ExtraLarge,
            };

        await _dialogService.OpenAsync<ChangeLogHistory>(title, paramsDic, options);
    }

    private async Task OpenInvoiceDetailsDialogAsync(int id)
    {
        var invoice = await GetInvoiceByIdAsync(id);

        if (invoice == null)
        {
            return;
        }

        var title = $"Invoice Details #{id}";
        var paramsDic = new Dictionary<string, object>()
            {
                { "InvoiceModel", invoice }
            };
        var options = new DialogOptions()
            {
                Width = ModalSize.ExtraLarge,
            };

        await _dialogService.OpenAsync<InvoiceDetails>(title, paramsDic, options);
    }

    private async Task<List<ChangeLogViewModel>> GetInvoiceChangeLogsAsync(int id)
    {
        var changeLogsRes = await _apiService.GetInvoiceChangeLogsAsync(id);

        if (!changeLogsRes.Success)
        {
            _notifyService.NotifyErrors("Get Invoice Change Logs", changeLogsRes.Messages);
            return null;
        }

        return changeLogsRes.Data;
    }

    private async Task<InvoiceViewModel> GetInvoiceByIdAsync(int id)
    {
        var invoiceRes = await _apiService.GetInvoiceByIdAsync(id);

        if (!invoiceRes.Success)
        {
            _notifyService.NotifyErrors("Get Invoice Information", invoiceRes.Messages);
            return null;
        }

        return invoiceRes.Data;
    }
}
